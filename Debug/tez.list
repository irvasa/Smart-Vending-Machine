
tez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d8  080056d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e0  080056e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000078  08005760  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005760  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001229b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f4  00000000  00000000  00032343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022204  00000000  00000000  00036c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013785  00000000  00000000  00058e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce11e  00000000  00000000  0006c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a6df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b0c  00000000  00000000  0013a734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005528 	.word	0x08005528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005528 	.word	0x08005528

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e007      	b.n	80005a0 <bufclr+0x28>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf3      	blt.n	8000590 <bufclr+0x18>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005be:	f000 f91f 	bl	8000800 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005c2:	4823      	ldr	r0, [pc, #140]	; (8000650 <ESP_Init+0x9c>)
 80005c4:	f000 f9e8 	bl	8000998 <Uart_sendstring>

	HAL_Delay(1000);
 80005c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005cc:	f001 fdcc 	bl	8002168 <HAL_Delay>

	Uart_flush();
 80005d0:	f000 f95e 	bl	8000890 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005d4:	481f      	ldr	r0, [pc, #124]	; (8000654 <ESP_Init+0xa0>)
 80005d6:	f000 f9df 	bl	8000998 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80005da:	bf00      	nop
 80005dc:	481e      	ldr	r0, [pc, #120]	; (8000658 <ESP_Init+0xa4>)
 80005de:	f000 fa0b 	bl	80009f8 <Wait_for>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f9      	beq.n	80005dc <ESP_Init+0x28>

	Uart_flush();
 80005e8:	f000 f952 	bl	8000890 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <ESP_Init+0xa8>)
 80005ee:	f000 f9d3 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80005f2:	bf00      	nop
 80005f4:	4818      	ldr	r0, [pc, #96]	; (8000658 <ESP_Init+0xa4>)
 80005f6:	f000 f9ff 	bl	80009f8 <Wait_for>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f9      	beq.n	80005f4 <ESP_Init+0x40>

	Uart_flush();
 8000600:	f000 f946 	bl	8000890 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000604:	f107 0008 	add.w	r0, r7, #8
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4914      	ldr	r1, [pc, #80]	; (8000660 <ESP_Init+0xac>)
 800060e:	f004 fb4f 	bl	8004cb0 <siprintf>
	Uart_sendstring(data);
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f9be 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 800061c:	bf00      	nop
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <ESP_Init+0xb0>)
 8000620:	f000 f9ea 	bl	80009f8 <Wait_for>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <ESP_Init+0x6a>

	Uart_flush();
 800062a:	f000 f931 	bl	8000890 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <ESP_Init+0xb4>)
 8000630:	f000 f9b2 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000634:	bf00      	nop
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <ESP_Init+0xa4>)
 8000638:	f000 f9de 	bl	80009f8 <Wait_for>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <ESP_Init+0x82>

	Uart_flush();
 8000642:	f000 f925 	bl	8000890 <Uart_flush>

}
 8000646:	bf00      	nop
 8000648:	3758      	adds	r7, #88	; 0x58
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08005540 	.word	0x08005540
 8000654:	0800554c 	.word	0x0800554c
 8000658:	08005554 	.word	0x08005554
 800065c:	0800555c 	.word	0x0800555c
 8000660:	0800556c 	.word	0x0800556c
 8000664:	08005584 	.word	0x08005584
 8000668:	08005590 	.word	0x08005590

0800066c <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 800066c:	b580      	push	{r7, lr}
 800066e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000672:	af00      	add	r7, sp, #0
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	6018      	str	r0, [r3, #0]
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	6019      	str	r1, [r3, #0]
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000684:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	3304      	adds	r3, #4
 800068e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fb03 	bl	8004ca0 <memset>
	char local_buf2[30] = {0};
 800069a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	3304      	adds	r3, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	22c4      	movs	r2, #196	; 0xc4
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 faec 	bl	8004ca0 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80006c8:	4844      	ldr	r0, [pc, #272]	; (80007dc <ESP_Send_Multi+0x170>)
 80006ca:	f000 f965 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006ce:	bf00      	nop
 80006d0:	4843      	ldr	r0, [pc, #268]	; (80007e0 <ESP_Send_Multi+0x174>)
 80006d2:	f000 f991 	bl	80009f8 <Wait_for>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <ESP_Send_Multi+0x64>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	493f      	ldr	r1, [pc, #252]	; (80007e4 <ESP_Send_Multi+0x178>)
 80006e8:	f004 fae2 	bl	8004cb0 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80006f2:	e01c      	b.n	800072e <ESP_Send_Multi+0xc2>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 80006f4:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80006f8:	1c59      	adds	r1, r3, #1
 80006fa:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	4413      	add	r3, r2
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	f107 0014 	add.w	r0, r7, #20
 800070c:	460a      	mov	r2, r1
 800070e:	4936      	ldr	r1, [pc, #216]	; (80007e8 <ESP_Send_Multi+0x17c>)
 8000710:	f004 face 	bl	8004cb0 <siprintf>
		strcat (local_buf, field_buf);
 8000714:	f107 0214 	add.w	r2, r7, #20
 8000718:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fae6 	bl	8004cf0 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000724:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000728:	3301      	adds	r3, #1
 800072a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbdb      	blt.n	80006f4 <ESP_Send_Multi+0x88>
	}

	strcat(local_buf, "\r\n");
 800073c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd45 	bl	80001d0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800074e:	4413      	add	r3, r2
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <ESP_Send_Multi+0x180>)
 8000752:	8811      	ldrh	r1, [r2, #0]
 8000754:	7892      	ldrb	r2, [r2, #2]
 8000756:	8019      	strh	r1, [r3, #0]
 8000758:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 800075a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd36 	bl	80001d0 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 800076a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800076e:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8000772:	491f      	ldr	r1, [pc, #124]	; (80007f0 <ESP_Send_Multi+0x184>)
 8000774:	4618      	mov	r0, r3
 8000776:	f004 fa9b 	bl	8004cb0 <siprintf>
	Uart_sendstring(local_buf2);
 800077a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f90a 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000784:	bf00      	nop
 8000786:	481b      	ldr	r0, [pc, #108]	; (80007f4 <ESP_Send_Multi+0x188>)
 8000788:	f000 f936 	bl	80009f8 <Wait_for>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <ESP_Send_Multi+0x11a>

	Uart_sendstring (local_buf);
 8000792:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8fe 	bl	8000998 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 800079c:	bf00      	nop
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <ESP_Send_Multi+0x18c>)
 80007a0:	f000 f92a 	bl	80009f8 <Wait_for>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f9      	beq.n	800079e <ESP_Send_Multi+0x132>

	while (!(Wait_for("CLOSED")));
 80007aa:	bf00      	nop
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <ESP_Send_Multi+0x190>)
 80007ae:	f000 f923 	bl	80009f8 <Wait_for>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f9      	beq.n	80007ac <ESP_Send_Multi+0x140>

	bufclr(local_buf);
 80007b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fedb 	bl	8000578 <bufclr>
	bufclr(local_buf2);
 80007c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fed6 	bl	8000578 <bufclr>

	Ringbuf_init();
 80007cc:	f000 f818 	bl	8000800 <Ringbuf_init>

}
 80007d0:	bf00      	nop
 80007d2:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	080055a0 	.word	0x080055a0
 80007e0:	08005554 	.word	0x08005554
 80007e4:	08005618 	.word	0x08005618
 80007e8:	08005630 	.word	0x08005630
 80007ec:	0800563c 	.word	0x0800563c
 80007f0:	080055f0 	.word	0x080055f0
 80007f4:	08005600 	.word	0x08005600
 80007f8:	08005604 	.word	0x08005604
 80007fc:	08005610 	.word	0x08005610

08000800 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <Ringbuf_init+0x3c>)
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <Ringbuf_init+0x40>)
 8000808:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <Ringbuf_init+0x44>)
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <Ringbuf_init+0x48>)
 800080e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <Ringbuf_init+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <Ringbuf_init+0x4c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 0201 	orr.w	r2, r2, #1
 800081e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <Ringbuf_init+0x4c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68da      	ldr	r2, [r3, #12]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <Ringbuf_init+0x4c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0220 	orr.w	r2, r2, #32
 800082e:	60da      	str	r2, [r3, #12]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000138 	.word	0x20000138
 8000840:	20000094 	.word	0x20000094
 8000844:	20000134 	.word	0x20000134
 8000848:	200000dc 	.word	0x200000dc
 800084c:	2000013c 	.word	0x2000013c

08000850 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	3301      	adds	r3, #1
 8000862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000866:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	429a      	cmp	r2, r3
 8000870:	d007      	beq.n	8000882 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	79f9      	ldrb	r1, [r7, #7]
 800087a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <Uart_flush>:

void Uart_flush (void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <Uart_flush+0x1c>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <Uart_flush+0x1c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800089e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000138 	.word	0x20000138

080008b0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <Uart_read+0x4c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <Uart_read+0x4c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d102      	bne.n	80008cc <Uart_read+0x1c>
  {
    return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e010      	b.n	80008ee <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <Uart_read+0x4c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <Uart_read+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <Uart_read+0x4c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <Uart_read+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000138 	.word	0x20000138

08000900 <Uart_write>:

void Uart_write(int c)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db21      	blt.n	8000952 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <Uart_write+0x60>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	3301      	adds	r3, #1
 8000916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800091a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800091c:	bf00      	nop
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <Uart_write+0x60>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	d0f9      	beq.n	800091e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <Uart_write+0x60>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <Uart_write+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	b2c9      	uxtb	r1, r1
 8000938:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <Uart_write+0x60>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <Uart_write+0x64>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <Uart_write+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000950:	60da      	str	r2, [r3, #12]
	}
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000134 	.word	0x20000134
 8000964:	2000013c 	.word	0x2000013c

08000968 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <IsDataAvailable+0x2c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <IsDataAvailable+0x2c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	b29b      	uxth	r3, r3
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	3340      	adds	r3, #64	; 0x40
 8000982:	b29b      	uxth	r3, r3
 8000984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000138 	.word	0x20000138

08000998 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009a0:	e006      	b.n	80009b0 <Uart_sendstring+0x18>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ffa8 	bl	8000900 <Uart_write>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f4      	bne.n	80009a2 <Uart_sendstring+0xa>
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <Uart_peek+0x30>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <Uart_peek+0x30>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d102      	bne.n	80009de <Uart_peek+0x1a>
  {
    return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	e005      	b.n	80009ea <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <Uart_peek+0x30>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <Uart_peek+0x30>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000138 	.word	0x20000138

080009f8 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fbe3 	bl	80001d0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffaa 	bl	8000968 <IsDataAvailable>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0fa      	beq.n	8000a10 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000a1a:	f7ff ffd3 	bl	80009c4 <Uart_peek>
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4299      	cmp	r1, r3
 8000a2a:	d01a      	beq.n	8000a62 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <Wait_for+0xa4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <Wait_for+0xa4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000a3e:	e7e6      	b.n	8000a0e <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000a46:	f7ff ff33 	bl	80008b0 <Uart_read>
		if (so_far == len) return 1;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d101      	bne.n	8000a56 <Wait_for+0x5e>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e01d      	b.n	8000a92 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000a56:	bf00      	nop
 8000a58:	f7ff ff86 	bl	8000968 <IsDataAvailable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0fa      	beq.n	8000a58 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000a62:	f7ff ffaf 	bl	80009c4 <Uart_peek>
 8000a66:	4601      	mov	r1, r0
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d0e5      	beq.n	8000a40 <Wait_for+0x48>
	}

	if (so_far != len)
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d002      	beq.n	8000a82 <Wait_for+0x8a>
	{
		so_far = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000a80:	e7c5      	b.n	8000a0e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d101      	bne.n	8000a8e <Wait_for+0x96>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e001      	b.n	8000a92 <Wait_for+0x9a>
	else return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000138 	.word	0x20000138

08000aa0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d013      	beq.n	8000aea <Uart_isr+0x4a>
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00e      	beq.n	8000aea <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <Uart_isr+0xac>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff feb4 	bl	8000850 <store_char>
        return;
 8000ae8:	e02c      	b.n	8000b44 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d027      	beq.n	8000b44 <Uart_isr+0xa4>
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d022      	beq.n	8000b44 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <Uart_isr+0xb0>)
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <Uart_isr+0xb0>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d108      	bne.n	8000b1c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b18:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b1a:	e012      	b.n	8000b42 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <Uart_isr+0xb0>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <Uart_isr+0xb0>)
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <Uart_isr+0xb0>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <Uart_isr+0xb0>)
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	605a      	str	r2, [r3, #4]
    	return;
 8000b42:	bf00      	nop
    }
}
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000138 	.word	0x20000138
 8000b50:	200000dc 	.word	0x200000dc

08000b54 <urun_secme>:
#include "stm32f4xx_hal.h"
#include "keypad.h"



uint8_t urun_secme(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	// Scan column 0 (column 0 pin is grounded, other column pins is open drain)
	    HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_1,GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4876      	ldr	r0, [pc, #472]	; (8000d38 <urun_secme+0x1e4>)
 8000b5e:	f001 fe7f 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_2,GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	4874      	ldr	r0, [pc, #464]	; (8000d38 <urun_secme+0x1e4>)
 8000b68:	f001 fe7a 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_3,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4871      	ldr	r0, [pc, #452]	; (8000d38 <urun_secme+0x1e4>)
 8000b72:	f001 fe75 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_4,GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	486f      	ldr	r0, [pc, #444]	; (8000d38 <urun_secme+0x1e4>)
 8000b7c:	f001 fe70 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f001 faf1 	bl	8002168 <HAL_Delay>
		// Read rows
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_1))
 8000b86:	2120      	movs	r1, #32
 8000b88:	486c      	ldr	r0, [pc, #432]	; (8000d3c <urun_secme+0x1e8>)
 8000b8a:	f001 fe51 	bl	8002830 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <urun_secme+0x44>
			return '1';
 8000b94:	2331      	movs	r3, #49	; 0x31
 8000b96:	e0cc      	b.n	8000d32 <urun_secme+0x1de>


		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_2))
 8000b98:	2110      	movs	r1, #16
 8000b9a:	4868      	ldr	r0, [pc, #416]	; (8000d3c <urun_secme+0x1e8>)
 8000b9c:	f001 fe48 	bl	8002830 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <urun_secme+0x56>
			return '4';
 8000ba6:	2334      	movs	r3, #52	; 0x34
 8000ba8:	e0c3      	b.n	8000d32 <urun_secme+0x1de>

		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_3))
 8000baa:	2108      	movs	r1, #8
 8000bac:	4863      	ldr	r0, [pc, #396]	; (8000d3c <urun_secme+0x1e8>)
 8000bae:	f001 fe3f 	bl	8002830 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <urun_secme+0x68>
			return '7';
 8000bb8:	2337      	movs	r3, #55	; 0x37
 8000bba:	e0ba      	b.n	8000d32 <urun_secme+0x1de>



		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_4))
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	485f      	ldr	r0, [pc, #380]	; (8000d3c <urun_secme+0x1e8>)
 8000bc0:	f001 fe36 	bl	8002830 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <urun_secme+0x7a>
			return '*';
 8000bca:	232a      	movs	r3, #42	; 0x2a
 8000bcc:	e0b1      	b.n	8000d32 <urun_secme+0x1de>

		// Scan column 1 (column 1 pin is grounded, other column pins is open drain)
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_1,GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	4859      	ldr	r0, [pc, #356]	; (8000d38 <urun_secme+0x1e4>)
 8000bd4:	f001 fe44 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_2,GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4856      	ldr	r0, [pc, #344]	; (8000d38 <urun_secme+0x1e4>)
 8000bde:	f001 fe3f 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_3,GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2102      	movs	r1, #2
 8000be6:	4854      	ldr	r0, [pc, #336]	; (8000d38 <urun_secme+0x1e4>)
 8000be8:	f001 fe3a 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_4,GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4851      	ldr	r0, [pc, #324]	; (8000d38 <urun_secme+0x1e4>)
 8000bf2:	f001 fe35 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bf6:	2064      	movs	r0, #100	; 0x64
 8000bf8:	f001 fab6 	bl	8002168 <HAL_Delay>
		// Read rows
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_1))
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	484f      	ldr	r0, [pc, #316]	; (8000d3c <urun_secme+0x1e8>)
 8000c00:	f001 fe16 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <urun_secme+0xba>
		return '2';
 8000c0a:	2332      	movs	r3, #50	; 0x32
 8000c0c:	e091      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_2))
 8000c0e:	2110      	movs	r1, #16
 8000c10:	484a      	ldr	r0, [pc, #296]	; (8000d3c <urun_secme+0x1e8>)
 8000c12:	f001 fe0d 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <urun_secme+0xcc>
		return '5';
 8000c1c:	2335      	movs	r3, #53	; 0x35
 8000c1e:	e088      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_3))
 8000c20:	2108      	movs	r1, #8
 8000c22:	4846      	ldr	r0, [pc, #280]	; (8000d3c <urun_secme+0x1e8>)
 8000c24:	f001 fe04 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <urun_secme+0xde>
		return '8';
 8000c2e:	2338      	movs	r3, #56	; 0x38
 8000c30:	e07f      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_4))
 8000c32:	2104      	movs	r1, #4
 8000c34:	4841      	ldr	r0, [pc, #260]	; (8000d3c <urun_secme+0x1e8>)
 8000c36:	f001 fdfb 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <urun_secme+0xf0>
		return '0';
 8000c40:	2330      	movs	r3, #48	; 0x30
 8000c42:	e076      	b.n	8000d32 <urun_secme+0x1de>

		// Scan column 2 (column 2 pin is grounded, other column pins is open drain)
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_1,GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2108      	movs	r1, #8
 8000c48:	483b      	ldr	r0, [pc, #236]	; (8000d38 <urun_secme+0x1e4>)
 8000c4a:	f001 fe09 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_2,GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2104      	movs	r1, #4
 8000c52:	4839      	ldr	r0, [pc, #228]	; (8000d38 <urun_secme+0x1e4>)
 8000c54:	f001 fe04 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_3,GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4836      	ldr	r0, [pc, #216]	; (8000d38 <urun_secme+0x1e4>)
 8000c5e:	f001 fdff 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_4,GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2101      	movs	r1, #1
 8000c66:	4834      	ldr	r0, [pc, #208]	; (8000d38 <urun_secme+0x1e4>)
 8000c68:	f001 fdfa 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f001 fa7b 	bl	8002168 <HAL_Delay>
		// Read rows
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_1))
 8000c72:	2120      	movs	r1, #32
 8000c74:	4831      	ldr	r0, [pc, #196]	; (8000d3c <urun_secme+0x1e8>)
 8000c76:	f001 fddb 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <urun_secme+0x130>
		return '3';
 8000c80:	2333      	movs	r3, #51	; 0x33
 8000c82:	e056      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_2))
 8000c84:	2110      	movs	r1, #16
 8000c86:	482d      	ldr	r0, [pc, #180]	; (8000d3c <urun_secme+0x1e8>)
 8000c88:	f001 fdd2 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <urun_secme+0x142>
		return '6';
 8000c92:	2336      	movs	r3, #54	; 0x36
 8000c94:	e04d      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_3))
 8000c96:	2108      	movs	r1, #8
 8000c98:	4828      	ldr	r0, [pc, #160]	; (8000d3c <urun_secme+0x1e8>)
 8000c9a:	f001 fdc9 	bl	8002830 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <urun_secme+0x154>
		return '9';
 8000ca4:	2339      	movs	r3, #57	; 0x39
 8000ca6:	e044      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_4))
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <urun_secme+0x1e8>)
 8000cac:	f001 fdc0 	bl	8002830 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <urun_secme+0x166>
		return '#';
 8000cb6:	2323      	movs	r3, #35	; 0x23
 8000cb8:	e03b      	b.n	8000d32 <urun_secme+0x1de>

		// Scan column 3 (column 3 pin is grounded, other column pins is open drain)
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_1,GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <urun_secme+0x1e4>)
 8000cc0:	f001 fdce 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_2,GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	481b      	ldr	r0, [pc, #108]	; (8000d38 <urun_secme+0x1e4>)
 8000cca:	f001 fdc9 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_3,GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4819      	ldr	r0, [pc, #100]	; (8000d38 <urun_secme+0x1e4>)
 8000cd4:	f001 fdc4 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SUTUN_PORT, SUTUN_4,GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <urun_secme+0x1e4>)
 8000cde:	f001 fdbf 	bl	8002860 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f001 fa40 	bl	8002168 <HAL_Delay>
		// Read rows
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_1))
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <urun_secme+0x1e8>)
 8000cec:	f001 fda0 	bl	8002830 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <urun_secme+0x1a6>
		return 'A';
 8000cf6:	2341      	movs	r3, #65	; 0x41
 8000cf8:	e01b      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_2))
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <urun_secme+0x1e8>)
 8000cfe:	f001 fd97 	bl	8002830 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <urun_secme+0x1b8>
		return 'B';
 8000d08:	2342      	movs	r3, #66	; 0x42
 8000d0a:	e012      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_3))
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <urun_secme+0x1e8>)
 8000d10:	f001 fd8e 	bl	8002830 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <urun_secme+0x1ca>
		return 'C';
 8000d1a:	2343      	movs	r3, #67	; 0x43
 8000d1c:	e009      	b.n	8000d32 <urun_secme+0x1de>
		if (!HAL_GPIO_ReadPin(SATIR_PORT, SATIR_4))
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <urun_secme+0x1e8>)
 8000d22:	f001 fd85 	bl	8002830 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <urun_secme+0x1dc>
		return 'D';
 8000d2c:	2344      	movs	r3, #68	; 0x44
 8000d2e:	e000      	b.n	8000d32 <urun_secme+0x1de>

		return KEYPAD_NO_PRESSED;
 8000d30:	23ff      	movs	r3, #255	; 0xff


}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <lcd16x2_init>:
  * 				LCD display and cursor attributes define in lcd16x2.h file.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_init(uint8_t disp_attr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	// Delay initialization
	HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 fa0c 	bl	8002168 <HAL_Delay>

// Delay power on
	HAL_Delay(LCD16X2_DELAY_POWER_ON);
 8000d50:	2010      	movs	r0, #16
 8000d52:	f001 fa09 	bl	8002168 <HAL_Delay>

	// Initialize 8-bit mode first
	HAL_GPIO_WritePin(LCD16X2_GPIO_D5,LCD16X2_PIN_D5,GPIO_PIN_SET); 	// Function set
 8000d56:	2201      	movs	r2, #1
 8000d58:	2108      	movs	r1, #8
 8000d5a:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <lcd16x2_init+0x98>)
 8000d5c:	f001 fd80 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D4,LCD16X2_PIN_D4,GPIO_PIN_SET); 	// 8-bit mode
 8000d60:	2201      	movs	r2, #1
 8000d62:	2104      	movs	r1, #4
 8000d64:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <lcd16x2_init+0x98>)
 8000d66:	f001 fd7b 	bl	8002860 <HAL_GPIO_WritePin>
	lcd16x2_toggle_e();
 8000d6a:	f000 f8b9 	bl	8000ee0 <lcd16x2_toggle_e>
	// Delay, busy flag can't be checked here
	HAL_Delay(LCD16X2_DELAY_INIT);
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f001 f9fa 	bl	8002168 <HAL_Delay>

	// Repeat last command
	lcd16x2_toggle_e();
 8000d74:	f000 f8b4 	bl	8000ee0 <lcd16x2_toggle_e>
	// Delay, busy flag can't be checked here
	HAL_Delay(LCD16X2_DELAY_INIT_REP);
 8000d78:	2040      	movs	r0, #64	; 0x40
 8000d7a:	f001 f9f5 	bl	8002168 <HAL_Delay>

	// Repeat last command for third time
	lcd16x2_toggle_e();
 8000d7e:	f000 f8af 	bl	8000ee0 <lcd16x2_toggle_e>
	// Delay, busy flag can't be checked here
	HAL_Delay(LCD16X2_DELAY_INIT_REP);
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f001 f9f0 	bl	8002168 <HAL_Delay>

	// Initialize 4-bit mode
	HAL_GPIO_WritePin(LCD16X2_GPIO_D5,LCD16X2_PIN_D5,GPIO_PIN_SET); 	// Function set
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <lcd16x2_init+0x98>)
 8000d8e:	f001 fd67 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D4,LCD16X2_PIN_D4,GPIO_PIN_RESET);  	// 4-bit mode
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <lcd16x2_init+0x98>)
 8000d98:	f001 fd62 	bl	8002860 <HAL_GPIO_WritePin>
	lcd16x2_toggle_e();
 8000d9c:	f000 f8a0 	bl	8000ee0 <lcd16x2_toggle_e>
	HAL_Delay(LCD16X2_DELAY_INIT_4BIT);
 8000da0:	2040      	movs	r0, #64	; 0x40
 8000da2:	f001 f9e1 	bl	8002168 <HAL_Delay>

	/* From now the LCD only accepts 4 bit I/O */

	// 4-bit interface, 2 lines, 5x7 dot format font
	lcd16x2_write_command(LCD16X2_FUNCTION_SET | LCD16X2_4BIT_INTERFACE |
 8000da6:	2028      	movs	r0, #40	; 0x28
 8000da8:	f000 f81a 	bl	8000de0 <lcd16x2_write_command>
		LCD16X2_2LINE_MODE | LCD16X2_5X7DOT_FORMAT);
	// Display off
	lcd16x2_write_command(LCD16X2_DISPLAY_CURSOR_ON_OFF | LCD16X2_DISPLAY_OFF);
 8000dac:	2008      	movs	r0, #8
 8000dae:	f000 f817 	bl	8000de0 <lcd16x2_write_command>
	// Clear screen
	lcd16x2_clrscr();
 8000db2:	f000 f835 	bl	8000e20 <lcd16x2_clrscr>
	// Entry mode
	lcd16x2_entry_inc();
 8000db6:	f000 f863 	bl	8000e80 <lcd16x2_entry_inc>
	// Display cursor on off
	display_cursor_on_off_control = disp_attr;
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <lcd16x2_init+0x9c>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	7013      	strb	r3, [r2, #0]
	lcd16x2_write_command(LCD16X2_DISPLAY_CURSOR_ON_OFF |
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <lcd16x2_init+0x9c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f808 	bl	8000de0 <lcd16x2_write_command>
		display_cursor_on_off_control);
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	20000124 	.word	0x20000124

08000de0 <lcd16x2_write_command>:
  * @param	The LCD instructions set.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_write_command(uint8_t cmd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	lcd16x2_wait_busy();
 8000dea:	f000 f9dd 	bl	80011a8 <lcd16x2_wait_busy>
	lcd16x2_write(cmd, 0);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f88a 	bl	8000f0c <lcd16x2_write>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <lcd16x2_write_data>:
  * @param	Data which want to written to the LCD.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_write_data(uint8_t data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	lcd16x2_wait_busy();
 8000e0a:	f000 f9cd 	bl	80011a8 <lcd16x2_wait_busy>
	lcd16x2_write(data, 1);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f87a 	bl	8000f0c <lcd16x2_write>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <lcd16x2_clrscr>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_clrscr()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	lcd16x2_write_command(LCD16X2_CLEAR_DISPLAY);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ffdb 	bl	8000de0 <lcd16x2_write_command>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <lcd16x2_gotoxy>:
  * @param	LCD row (y)
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_gotoxy(uint8_t x, uint8_t y)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	460a      	mov	r2, r1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71bb      	strb	r3, [r7, #6]
#if LCD16X2_LINES == 1
	lcd16X2_write_command(LCD16X2_SET_DDRAM_ADDRESS |
		(LCD16X2_START_LINE_1 + x));
#elif LCD16X2_LINES == 2
	if (y == 0)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <lcd16x2_gotoxy+0x26>
		lcd16x2_write_command(LCD16X2_SET_DDRAM_ADDRESS |
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffc7 	bl	8000de0 <lcd16x2_write_command>
			(LCD16X2_START_LINE_1 + x));
	else
		lcd16x2_write_command(LCD16X2_SET_DDRAM_ADDRESS |
			(LCD16X2_START_LINE_2 + x));
#endif
}
 8000e52:	e00a      	b.n	8000e6a <lcd16x2_gotoxy+0x3c>
			(LCD16X2_START_LINE_2 + x));
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3340      	adds	r3, #64	; 0x40
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	b25b      	sxtb	r3, r3
		lcd16x2_write_command(LCD16X2_SET_DDRAM_ADDRESS |
 8000e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ffbb 	bl	8000de0 <lcd16x2_write_command>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <lcd16x2_getxy>:
  * @param	None
  * @retval	LCD cursor/ DDRAM address.
  ******************************************************************************
  */
uint8_t lcd16x2_getxy()
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
	return lcd16x2_wait_busy();
 8000e76:	f000 f997 	bl	80011a8 <lcd16x2_wait_busy>
 8000e7a:	4603      	mov	r3, r0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <lcd16x2_entry_inc>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_entry_inc()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	lcd16x2_write_command(LCD16X2_CHARACTER_ENTRY_MODE | LCD16X2_INCREMENT |
 8000e84:	2006      	movs	r0, #6
 8000e86:	f7ff ffab 	bl	8000de0 <lcd16x2_write_command>
		LCD16X2_DISPLAY_SHIFT_OFF);
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <lcd16x2_putc>:
  * @param	Character that want to be displayed.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_putc(const char c)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	uint8_t pos = lcd16x2_getxy();
 8000e98:	f7ff ffeb 	bl	8000e72 <lcd16x2_getxy>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	73fb      	strb	r3, [r7, #15]

	if (c == '\n')
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d104      	bne.n	8000eb0 <lcd16x2_putc+0x22>
	{
		lcd16x2_new_line(pos);
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f988 	bl	80011be <lcd16x2_new_line>
				LCD16X2_START_LINE_1, 0);
#endif

		lcd16x2_write_data(c);
	}
}
 8000eae:	e012      	b.n	8000ed6 <lcd16x2_putc+0x48>
		if (pos == (LCD16X2_START_LINE_1 + LCD16X2_DISP_LENGTH))
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d104      	bne.n	8000ec0 <lcd16x2_putc+0x32>
			lcd16x2_write(LCD16X2_SET_DDRAM_ADDRESS |
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	20c0      	movs	r0, #192	; 0xc0
 8000eba:	f000 f827 	bl	8000f0c <lcd16x2_write>
 8000ebe:	e006      	b.n	8000ece <lcd16x2_putc+0x40>
		else if (pos == (LCD16X2_START_LINE_2 + LCD16X2_DISP_LENGTH))
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b50      	cmp	r3, #80	; 0x50
 8000ec4:	d103      	bne.n	8000ece <lcd16x2_putc+0x40>
			lcd16x2_write(LCD16X2_SET_DDRAM_ADDRESS |
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2080      	movs	r0, #128	; 0x80
 8000eca:	f000 f81f 	bl	8000f0c <lcd16x2_write>
		lcd16x2_write_data(c);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff95 	bl	8000e00 <lcd16x2_write_data>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <lcd16x2_toggle_e>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
 void lcd16x2_toggle_e()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	// EN pin = HIGH
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <lcd16x2_toggle_e+0x28>)
 8000eec:	f001 fcb8 	bl	8002860 <HAL_GPIO_WritePin>
	// Pulse length in us
	HAL_Delay(LCD16X2_DELAY_ENABLE_PULSE);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f001 f939 	bl	8002168 <HAL_Delay>
	// EN pin = LOW
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <lcd16x2_toggle_e+0x28>)
 8000efe:	f001 fcaf 	bl	8002860 <HAL_GPIO_WritePin>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020800 	.word	0x40020800

08000f0c <lcd16x2_write>:
  *					RS = 0. Otherwise, RS = 1.
  * @retval	None
  ******************************************************************************
  */
 void lcd16x2_write(uint8_t data, uint8_t rs)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	// Write mode (RW = 0)
	HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RW,GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f22:	4853      	ldr	r0, [pc, #332]	; (8001070 <lcd16x2_write+0x164>)
 8000f24:	f001 fc9c 	bl	8002860 <HAL_GPIO_WritePin>

	if (rs)
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <lcd16x2_write+0x30>
		// Write data (RS = 1)
		HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RS,GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f34:	484e      	ldr	r0, [pc, #312]	; (8001070 <lcd16x2_write+0x164>)
 8000f36:	f001 fc93 	bl	8002860 <HAL_GPIO_WritePin>
 8000f3a:	e005      	b.n	8000f48 <lcd16x2_write+0x3c>

	else
		// Write instruction (RS = 0)
		HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RS,GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	484b      	ldr	r0, [pc, #300]	; (8001070 <lcd16x2_write+0x164>)
 8000f44:	f001 fc8c 	bl	8002860 <HAL_GPIO_WritePin>


	// Output high nibble first
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D7,GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4849      	ldr	r0, [pc, #292]	; (8001074 <lcd16x2_write+0x168>)
 8000f4e:	f001 fc87 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D6,LCD16X2_PIN_D6,GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	4847      	ldr	r0, [pc, #284]	; (8001074 <lcd16x2_write+0x168>)
 8000f58:	f001 fc82 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D5,LCD16X2_PIN_D5,GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4844      	ldr	r0, [pc, #272]	; (8001074 <lcd16x2_write+0x168>)
 8000f62:	f001 fc7d 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D4,LCD16X2_PIN_D4,GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4842      	ldr	r0, [pc, #264]	; (8001074 <lcd16x2_write+0x168>)
 8000f6c:	f001 fc78 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x80) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D7,GPIO_PIN_SET);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da04      	bge.n	8000f82 <lcd16x2_write+0x76>
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	483d      	ldr	r0, [pc, #244]	; (8001074 <lcd16x2_write+0x168>)
 8000f7e:	f001 fc6f 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D6,GPIO_PIN_SET);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <lcd16x2_write+0x8a>
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4838      	ldr	r0, [pc, #224]	; (8001074 <lcd16x2_write+0x168>)
 8000f92:	f001 fc65 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D5,GPIO_PIN_SET);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 0320 	and.w	r3, r3, #32
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <lcd16x2_write+0x9e>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4833      	ldr	r0, [pc, #204]	; (8001074 <lcd16x2_write+0x168>)
 8000fa6:	f001 fc5b 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D4,GPIO_PIN_SET);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <lcd16x2_write+0xb2>
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	482e      	ldr	r0, [pc, #184]	; (8001074 <lcd16x2_write+0x168>)
 8000fba:	f001 fc51 	bl	8002860 <HAL_GPIO_WritePin>
	lcd16x2_toggle_e();
 8000fbe:	f7ff ff8f 	bl	8000ee0 <lcd16x2_toggle_e>

	// Output low nibble
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D7,GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	482b      	ldr	r0, [pc, #172]	; (8001074 <lcd16x2_write+0x168>)
 8000fc8:	f001 fc4a 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D6,GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4828      	ldr	r0, [pc, #160]	; (8001074 <lcd16x2_write+0x168>)
 8000fd2:	f001 fc45 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D5,GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4826      	ldr	r0, [pc, #152]	; (8001074 <lcd16x2_write+0x168>)
 8000fdc:	f001 fc40 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D4,GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <lcd16x2_write+0x168>)
 8000fe6:	f001 fc3b 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x08) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D7,GPIO_PIN_SET);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <lcd16x2_write+0xf2>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <lcd16x2_write+0x168>)
 8000ffa:	f001 fc31 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D6,GPIO_PIN_SET);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <lcd16x2_write+0x106>
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <lcd16x2_write+0x168>)
 800100e:	f001 fc27 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D5,GPIO_PIN_SET);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <lcd16x2_write+0x11a>
 800101c:	2201      	movs	r2, #1
 800101e:	2108      	movs	r1, #8
 8001020:	4814      	ldr	r0, [pc, #80]	; (8001074 <lcd16x2_write+0x168>)
 8001022:	f001 fc1d 	bl	8002860 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D4,GPIO_PIN_SET);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <lcd16x2_write+0x12e>
 8001030:	2201      	movs	r2, #1
 8001032:	2104      	movs	r1, #4
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <lcd16x2_write+0x168>)
 8001036:	f001 fc13 	bl	8002860 <HAL_GPIO_WritePin>
	lcd16x2_toggle_e();
 800103a:	f7ff ff51 	bl	8000ee0 <lcd16x2_toggle_e>

	// All data pins high (inactive)
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D7,GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2120      	movs	r1, #32
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <lcd16x2_write+0x168>)
 8001044:	f001 fc0c 	bl	8002860 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D6,GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2110      	movs	r1, #16
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <lcd16x2_write+0x168>)
 800104e:	f001 fc07 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D5,GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <lcd16x2_write+0x168>)
 8001058:	f001 fc02 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_GPIO_D7,LCD16X2_PIN_D4,GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2104      	movs	r1, #4
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <lcd16x2_write+0x168>)
 8001062:	f001 fbfd 	bl	8002860 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00

08001078 <lcd16x2_read>:
  *					If read DDRAM address + busy flag, then RS = 0. Otherwise, RS = 1.
  * @retval	DDRAM address + busy flag or data value.
  ******************************************************************************
  */
 uint8_t lcd16x2_read(uint8_t rs)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]

	// Read mode (RW = 1)
	HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RW,GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108c:	4844      	ldr	r0, [pc, #272]	; (80011a0 <lcd16x2_read+0x128>)
 800108e:	f001 fbe7 	bl	8002860 <HAL_GPIO_WritePin>

	if (rs)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <lcd16x2_read+0x2e>
		// Read data (RS = 1)
		HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RS,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4840      	ldr	r0, [pc, #256]	; (80011a0 <lcd16x2_read+0x128>)
 80010a0:	f001 fbde 	bl	8002860 <HAL_GPIO_WritePin>
 80010a4:	e005      	b.n	80010b2 <lcd16x2_read+0x3a>
	else
		// Read busy flag and DDRAM address (RS = 0)
		HAL_GPIO_WritePin(LCD16X2_GPIO_RS,LCD16X2_PIN_RS,GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	483c      	ldr	r0, [pc, #240]	; (80011a0 <lcd16x2_read+0x128>)
 80010ae:	f001 fbd7 	bl	8002860 <HAL_GPIO_WritePin>

	// EN pin = HIGH
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b8:	4839      	ldr	r0, [pc, #228]	; (80011a0 <lcd16x2_read+0x128>)
 80010ba:	f001 fbd1 	bl	8002860 <HAL_GPIO_WritePin>
	// Pulse length in us
	HAL_Delay(LCD16X2_DELAY_ENABLE_PULSE);
 80010be:	2002      	movs	r0, #2
 80010c0:	f001 f852 	bl	8002168 <HAL_Delay>
	/* Read high nibble first */
	if (LCD16X2_GPIO_D4->IDR & LCD16X2_PIN_D4) data |= 0x10;
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <lcd16x2_read+0x12c>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <lcd16x2_read+0x60>
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D5->IDR & LCD16X2_PIN_D5) data |= 0x20;
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <lcd16x2_read+0x12c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <lcd16x2_read+0x74>
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D6->IDR & LCD16X2_PIN_D6) data |= 0x40;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <lcd16x2_read+0x12c>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <lcd16x2_read+0x88>
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fe:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D7->IDR & LCD16X2_PIN_D7) data |= 0x80;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <lcd16x2_read+0x12c>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <lcd16x2_read+0x9c>
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001112:	73fb      	strb	r3, [r7, #15]
	// EN pin = LOW
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	4821      	ldr	r0, [pc, #132]	; (80011a0 <lcd16x2_read+0x128>)
 800111c:	f001 fba0 	bl	8002860 <HAL_GPIO_WritePin>

	// EN pin LOW delay
	HAL_Delay(LCD16X2_DELAY_ENABLE_PULSE);
 8001120:	2002      	movs	r0, #2
 8001122:	f001 f821 	bl	8002168 <HAL_Delay>

	// EN pin = HIGH
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <lcd16x2_read+0x128>)
 800112e:	f001 fb97 	bl	8002860 <HAL_GPIO_WritePin>
	// Pulse length in us
	HAL_Delay(LCD16X2_DELAY_ENABLE_PULSE);
 8001132:	2002      	movs	r0, #2
 8001134:	f001 f818 	bl	8002168 <HAL_Delay>
	/* Read low nibble */
	if (LCD16X2_GPIO_D4->IDR & LCD16X2_PIN_D4) data |= 0x01;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <lcd16x2_read+0x12c>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <lcd16x2_read+0xd4>
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D5->IDR & LCD16X2_PIN_D5) data |= 0x02;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <lcd16x2_read+0x12c>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <lcd16x2_read+0xe8>
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D6->IDR & LCD16X2_PIN_D6) data |= 0x04;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <lcd16x2_read+0x12c>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <lcd16x2_read+0xfc>
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	73fb      	strb	r3, [r7, #15]
	if (LCD16X2_GPIO_D7->IDR & LCD16X2_PIN_D7) data |= 0x08;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <lcd16x2_read+0x12c>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <lcd16x2_read+0x110>
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	73fb      	strb	r3, [r7, #15]
	// EN pin = LOW
	HAL_GPIO_WritePin(LCD16X2_GPIO_EN,LCD16X2_PIN_EN,GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <lcd16x2_read+0x128>)
 8001190:	f001 fb66 	bl	8002860 <HAL_GPIO_WritePin>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00

080011a8 <lcd16x2_wait_busy>:
  * @param	None
  * @retval	DDRAM address + busy flag value.
  ******************************************************************************
  */
 uint8_t lcd16x2_wait_busy()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	// Wait until busy flag is cleared
	//while (lcd16x2_read(0) & (LCD16X2_BUSY_FLAG));

	// Delay needed for address counter is updated after busy flag is cleared
	HAL_Delay(LCD16X2_DELAY_BUSY_FLAG);
 80011ac:	2004      	movs	r0, #4
 80011ae:	f000 ffdb 	bl	8002168 <HAL_Delay>

	// Read and return address counter
	return lcd16x2_read(0);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ff60 	bl	8001078 <lcd16x2_read>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}

080011be <lcd16x2_new_line>:
  * @param	Current cursor/ DDRAM address position.
  * @retval	None
  ******************************************************************************
  */
 void lcd16x2_new_line(uint8_t pos)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
	uint8_t address_counter;

#if LCD16X2_LINES == 1
	address_counter = 0;
#elif LCD16X2_LINES == 2
	if (pos < LCD16X2_START_LINE_2)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b3f      	cmp	r3, #63	; 0x3f
 80011cc:	d802      	bhi.n	80011d4 <lcd16x2_new_line+0x16>
		address_counter = LCD16X2_START_LINE_2;
 80011ce:	2340      	movs	r3, #64	; 0x40
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e001      	b.n	80011d8 <lcd16x2_new_line+0x1a>
	else
		address_counter = LCD16X2_START_LINE_1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
#endif

	lcd16x2_write_command(LCD16X2_SET_DDRAM_ADDRESS | address_counter);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdfd 	bl	8000de0 <lcd16x2_write_command>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	i=0;
 80011f6:	4baa      	ldr	r3, [pc, #680]	; (80014a0 <main+0x2b0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 ff42 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f9cc 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 fbe4 	bl	80019d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001208:	f000 fa30 	bl	800166c <MX_I2C1_Init>
  MX_TIM4_Init();
 800120c:	f000 fa5c 	bl	80016c8 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001210:	f000 fad2 	bl	80017b8 <MX_TIM10_Init>
  MX_TIM13_Init();
 8001214:	f000 fb64 	bl	80018e0 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8001218:	f000 fbb0 	bl	800197c <MX_USART2_UART_Init>
  MX_TIM12_Init();
 800121c:	f000 fb1a 	bl	8001854 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  lcd16x2_init(LCD16X2_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
 8001220:	2004      	movs	r0, #4
 8001222:	f7ff fd8d 	bl	8000d40 <lcd16x2_init>
  HAL_TIM_Base_Start(&htim4);
 8001226:	489f      	ldr	r0, [pc, #636]	; (80014a4 <main+0x2b4>)
 8001228:	f002 f956 	bl	80034d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//pwm start 1 nolu motor
 800122c:	2100      	movs	r1, #0
 800122e:	489d      	ldr	r0, [pc, #628]	; (80014a4 <main+0x2b4>)
 8001230:	f002 fa0a 	bl	8003648 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim13);
 8001234:	489c      	ldr	r0, [pc, #624]	; (80014a8 <main+0x2b8>)
 8001236:	f002 f94f 	bl	80034d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);//pwm start 2 nolu motor
 800123a:	2100      	movs	r1, #0
 800123c:	489a      	ldr	r0, [pc, #616]	; (80014a8 <main+0x2b8>)
 800123e:	f002 fa03 	bl	8003648 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim10);
 8001242:	489a      	ldr	r0, [pc, #616]	; (80014ac <main+0x2bc>)
 8001244:	f002 f948 	bl	80034d8 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);//pwm start 2 nolu motor
 8001248:	2100      	movs	r1, #0
 800124a:	4898      	ldr	r0, [pc, #608]	; (80014ac <main+0x2bc>)
 800124c:	f002 f9fc 	bl	8003648 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start(&htim12);
 8001250:	4897      	ldr	r0, [pc, #604]	; (80014b0 <main+0x2c0>)
 8001252:	f002 f941 	bl	80034d8 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//pwm start 2 nolu motor
 8001256:	2100      	movs	r1, #0
 8001258:	4895      	ldr	r0, [pc, #596]	; (80014b0 <main+0x2c0>)
 800125a:	f002 f9f5 	bl	8003648 <HAL_TIM_PWM_Start>


  ESP_Init("Ohabe","rengeyigi123");
 800125e:	4995      	ldr	r1, [pc, #596]	; (80014b4 <main+0x2c4>)
 8001260:	4895      	ldr	r0, [pc, #596]	; (80014b8 <main+0x2c8>)
 8001262:	f7ff f9a7 	bl	80005b4 <ESP_Init>
    /* USER CODE BEGIN 3 */

//htim4.Instance->CCR1 =180;
	//htim4.Instance->CCR1 =0;

	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==SET)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	4894      	ldr	r0, [pc, #592]	; (80014bc <main+0x2cc>)
 800126a:	f001 fae1 	bl	8002830 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b01      	cmp	r3, #1
 8001272:	d129      	bne.n	80012c8 <main+0xd8>
	{

		char a[]={"hatali kart"};
 8001274:	4a92      	ldr	r2, [pc, #584]	; (80014c0 <main+0x2d0>)
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		for(y=0;y<11;y++ ){
 8001280:	4b90      	ldr	r3, [pc, #576]	; (80014c4 <main+0x2d4>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e015      	b.n	80012b4 <main+0xc4>
		lcd16x2_gotoxy(y, 0);
 8001288:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <main+0x2d4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdcd 	bl	8000e2e <lcd16x2_gotoxy>
			      lcd16x2_putc(a[y]);}
 8001294:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <main+0x2d4>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f107 0220 	add.w	r2, r7, #32
 800129c:	4413      	add	r3, r2
 800129e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fdf3 	bl	8000e8e <lcd16x2_putc>
		for(y=0;y<11;y++ ){
 80012a8:	4b86      	ldr	r3, [pc, #536]	; (80014c4 <main+0x2d4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <main+0x2d4>)
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <main+0x2d4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	d9e5      	bls.n	8001288 <main+0x98>

			      HAL_Delay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f000 ff52 	bl	8002168 <HAL_Delay>
			      lcd16x2_clrscr();
 80012c4:	f7ff fdac 	bl	8000e20 <lcd16x2_clrscr>

	}

if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==SET){
 80012c8:	2108      	movs	r1, #8
 80012ca:	487f      	ldr	r0, [pc, #508]	; (80014c8 <main+0x2d8>)
 80012cc:	f001 fab0 	bl	8002830 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	f040 8133 	bne.w	800153e <main+0x34e>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 80012d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012dc:	4877      	ldr	r0, [pc, #476]	; (80014bc <main+0x2cc>)
 80012de:	f001 fad8 	bl	8002892 <HAL_GPIO_TogglePin>
if(k==0){
 80012e2:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <main+0x2dc>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d12e      	bne.n	8001348 <main+0x158>

			char a[]={"gecerli kart"};
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <main+0x2e0>)
 80012ec:	1d3c      	adds	r4, r7, #4
 80012ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f0:	c407      	stmia	r4!, {r0, r1, r2}
 80012f2:	7023      	strb	r3, [r4, #0]
			for(z=0;z<12;z++ ){
 80012f4:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <main+0x2e4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e015      	b.n	8001328 <main+0x138>
			lcd16x2_gotoxy(z,1 );
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <main+0x2e4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd93 	bl	8000e2e <lcd16x2_gotoxy>
				      lcd16x2_putc(a[z]);}
 8001308:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <main+0x2e4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f107 0220 	add.w	r2, r7, #32
 8001310:	4413      	add	r3, r2
 8001312:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fdb9 	bl	8000e8e <lcd16x2_putc>
			for(z=0;z<12;z++ ){
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <main+0x2e4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <main+0x2e4>)
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <main+0x2e4>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b0b      	cmp	r3, #11
 800132e:	d9e5      	bls.n	80012fc <main+0x10c>

				      HAL_Delay(500);
 8001330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001334:	f000 ff18 	bl	8002168 <HAL_Delay>
				      lcd16x2_clrscr();
 8001338:	f7ff fd72 	bl	8000e20 <lcd16x2_clrscr>
				      k++;
 800133c:	4b63      	ldr	r3, [pc, #396]	; (80014cc <main+0x2dc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <main+0x2dc>)
 8001346:	701a      	strb	r2, [r3, #0]
}

key[i]=urun_secme();
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <main+0x2b0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461c      	mov	r4, r3
 800134e:	f7ff fc01 	bl	8000b54 <urun_secme>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <main+0x2e8>)
 8001358:	551a      	strb	r2, [r3, r4]
	  if (key[i] != KEYPAD_NO_PRESSED)
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <main+0x2b0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <main+0x2e8>)
 8001362:	5c9b      	ldrb	r3, [r3, r2]
 8001364:	2bff      	cmp	r3, #255	; 0xff
 8001366:	f000 80ea 	beq.w	800153e <main+0x34e>
	     {

	      lcd16x2_gotoxy(i, 0);
 800136a:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <main+0x2b0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fd5c 	bl	8000e2e <lcd16x2_gotoxy>
	      lcd16x2_putc(key[i]);
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <main+0x2b0>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <main+0x2e8>)
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fd84 	bl	8000e8e <lcd16x2_putc>
	      HAL_Delay(250);
 8001386:	20fa      	movs	r0, #250	; 0xfa
 8001388:	f000 feee 	bl	8002168 <HAL_Delay>
	      i++;
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <main+0x2b0>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <main+0x2b0>)
 8001396:	701a      	strb	r2, [r3, #0]
	                if(key[i-1]=='*') {
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <main+0x2b0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <main+0x2e8>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	2b2a      	cmp	r3, #42	; 0x2a
 80013a4:	d108      	bne.n	80013b8 <main+0x1c8>
	                lcd16x2_clrscr();
 80013a6:	f7ff fd3b 	bl	8000e20 <lcd16x2_clrscr>
	                i=0;
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <main+0x2b0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	                key[16]=" ";
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <main+0x2ec>)
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <main+0x2e8>)
 80013b6:	741a      	strb	r2, [r3, #16]
	                              }
	                if(key[i-1]=='#') {
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <main+0x2b0>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <main+0x2e8>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	2b23      	cmp	r3, #35	; 0x23
 80013c4:	f040 80bb 	bne.w	800153e <main+0x34e>
	               	lcd16x2_clrscr();
 80013c8:	f7ff fd2a 	bl	8000e20 <lcd16x2_clrscr>
	               	                   while(key[0]=='1' && key[1]=='#'){
 80013cc:	e019      	b.n	8001402 <main+0x212>
	               	                   htim10.Instance->CCR1 =180;
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <main+0x2bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	22b4      	movs	r2, #180	; 0xb4
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
	               	                if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==SET){
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4838      	ldr	r0, [pc, #224]	; (80014bc <main+0x2cc>)
 80013dc:	f001 fa28 	bl	8002830 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10d      	bne.n	8001402 <main+0x212>
	               	                    htim10.Instance->CCR1 =0;
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <main+0x2bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
	               	                    urun1=urun1-1;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <main+0x2f0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <main+0x2f0>)
 80013f8:	801a      	strh	r2, [r3, #0]
	               	                    k=0;
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <main+0x2dc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	               	                    break;
 8001400:	e007      	b.n	8001412 <main+0x222>
	               	                   while(key[0]=='1' && key[1]=='#'){
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <main+0x2e8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b31      	cmp	r3, #49	; 0x31
 8001408:	d11e      	bne.n	8001448 <main+0x258>
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <main+0x2e8>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	2b23      	cmp	r3, #35	; 0x23
 8001410:	d0dd      	beq.n	80013ce <main+0x1de>
	               	                }
	               	                   }
	               	                    while(key[0]=='2' && key[1]=='#'){
 8001412:	e019      	b.n	8001448 <main+0x258>
	               	               	     htim12.Instance->CCR1 =180;
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <main+0x2c0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	22b4      	movs	r2, #180	; 0xb4
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
	               	               	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==SET){
 800141c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <main+0x2cc>)
 8001422:	f001 fa05 	bl	8002830 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10d      	bne.n	8001448 <main+0x258>
	               	               	     htim12.Instance->CCR1 =0;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <main+0x2c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
	               	               	      urun2=urun2-1;
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <main+0x2f4>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <main+0x2f4>)
 800143e:	801a      	strh	r2, [r3, #0]
	               	               	      k=0;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <main+0x2dc>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	               	               	      break;
 8001446:	e007      	b.n	8001458 <main+0x268>
	               	                    while(key[0]=='2' && key[1]=='#'){
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <main+0x2e8>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b32      	cmp	r3, #50	; 0x32
 800144e:	d11e      	bne.n	800148e <main+0x29e>
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <main+0x2e8>)
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	2b23      	cmp	r3, #35	; 0x23
 8001456:	d0dd      	beq.n	8001414 <main+0x224>
	               	               	}
	               	               	    }
	               	                 while(key[0]=='3' && key[1]=='#'){
 8001458:	e019      	b.n	800148e <main+0x29e>
	               	                 htim4.Instance->CCR1 =180;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <main+0x2b4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	22b4      	movs	r2, #180	; 0xb4
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
	               	              if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==SET){
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <main+0x2cc>)
 8001468:	f001 f9e2 	bl	8002830 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10d      	bne.n	800148e <main+0x29e>
	               	              	               	               	     htim4.Instance->CCR1 =0;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <main+0x2b4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
	               	              	               	               	      urun3=urun3-1;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <main+0x2f8>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	3b01      	subs	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <main+0x2f8>)
 8001484:	801a      	strh	r2, [r3, #0]
	               	              	               	               	      k=0;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <main+0x2dc>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	               	              	               	               	      break;
 800148c:	e007      	b.n	800149e <main+0x2ae>
	               	                 while(key[0]=='3' && key[1]=='#'){
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0x2e8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b33      	cmp	r3, #51	; 0x33
 8001494:	d144      	bne.n	8001520 <main+0x330>
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <main+0x2e8>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	2b23      	cmp	r3, #35	; 0x23
 800149c:	d0dd      	beq.n	800145a <main+0x26a>
	               	                 }
	               	                 }
	               	              while(key[0]=='4' && key[1]=='#'){
 800149e:	e03f      	b.n	8001520 <main+0x330>
 80014a0:	20000265 	.word	0x20000265
 80014a4:	20000180 	.word	0x20000180
 80014a8:	20000268 	.word	0x20000268
 80014ac:	2000021c 	.word	0x2000021c
 80014b0:	200002cc 	.word	0x200002cc
 80014b4:	08005640 	.word	0x08005640
 80014b8:	08005650 	.word	0x08005650
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	08005670 	.word	0x08005670
 80014c4:	200002b0 	.word	0x200002b0
 80014c8:	40020400 	.word	0x40020400
 80014cc:	20000125 	.word	0x20000125
 80014d0:	0800567c 	.word	0x0800567c
 80014d4:	20000264 	.word	0x20000264
 80014d8:	200002b4 	.word	0x200002b4
 80014dc:	08005658 	.word	0x08005658
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000002 	.word	0x20000002
 80014e8:	20000004 	.word	0x20000004
	               	              htim13.Instance->CCR1 =180;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <main+0x37c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	22b4      	movs	r2, #180	; 0xb4
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
	               	           if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==SET){
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <main+0x380>)
 80014fa:	f001 f999 	bl	8002830 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d10d      	bne.n	8001520 <main+0x330>
	               	           	               	               	     htim13.Instance->CCR1 =0;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <main+0x37c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
	               	           	               	               	      urun4=urun4-1;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <main+0x384>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <main+0x384>)
 8001516:	801a      	strh	r2, [r3, #0]
	               	           	               	               	      k=0;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <main+0x388>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
	               	           	               	               	      break;
 800151e:	e007      	b.n	8001530 <main+0x340>
	               	              while(key[0]=='4' && key[1]=='#'){
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <main+0x38c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b34      	cmp	r3, #52	; 0x34
 8001526:	d103      	bne.n	8001530 <main+0x340>
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <main+0x38c>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b23      	cmp	r3, #35	; 0x23
 800152e:	d0dd      	beq.n	80014ec <main+0x2fc>
	               	           }
	               	             	 }

	               	   i=0;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <main+0x390>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
	               	    key[16]=" ";
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <main+0x394>)
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <main+0x38c>)
 800153c:	741a      	strb	r2, [r3, #16]

	     }


	   }
Value_Buf[0]=urun1;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <main+0x398>)
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <main+0x39c>)
 8001544:	801a      	strh	r2, [r3, #0]
	  Value_Buf[1]=urun2;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <main+0x3a0>)
 8001548:	881a      	ldrh	r2, [r3, #0]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <main+0x39c>)
 800154c:	805a      	strh	r2, [r3, #2]
	  Value_Buf[2]=urun3;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <main+0x3a4>)
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <main+0x39c>)
 8001554:	809a      	strh	r2, [r3, #4]
	  Value_Buf[3]=urun4;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <main+0x384>)
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <main+0x39c>)
 800155c:	80da      	strh	r2, [r3, #6]
	 ESP_Send_Multi("N3K0GSTF31XC4OXV", 4 , Value_Buf);
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <main+0x39c>)
 8001560:	2104      	movs	r1, #4
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <main+0x3a8>)
 8001564:	f7ff f882 	bl	800066c <ESP_Send_Multi>
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==SET)
 8001568:	e67d      	b.n	8001266 <main+0x76>
 800156a:	bf00      	nop
 800156c:	20000268 	.word	0x20000268
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20000006 	.word	0x20000006
 8001578:	20000125 	.word	0x20000125
 800157c:	200002b4 	.word	0x200002b4
 8001580:	20000265 	.word	0x20000265
 8001584:	08005658 	.word	0x08005658
 8001588:	20000000 	.word	0x20000000
 800158c:	200002c4 	.word	0x200002c4
 8001590:	20000002 	.word	0x20000002
 8001594:	20000004 	.word	0x20000004
 8001598:	0800565c 	.word	0x0800565c

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	; 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2230      	movs	r2, #48	; 0x30
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fb78 	bl	8004ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <SystemClock_Config+0xc8>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a26      	ldr	r2, [pc, #152]	; (8001664 <SystemClock_Config+0xc8>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <SystemClock_Config+0xc8>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <SystemClock_Config+0xcc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <SystemClock_Config+0xcc>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <SystemClock_Config+0xcc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001602:	2302      	movs	r3, #2
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800160c:	2304      	movs	r3, #4
 800160e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fa95 	bl	8002b50 <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800162c:	f000 fa9a 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001634:	2302      	movs	r3, #2
 8001636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fcf7 	bl	8003040 <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001658:	f000 fa84 	bl	8001b64 <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	3750      	adds	r7, #80	; 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f001 f90d 	bl	80028c8 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b4:	f000 fa56 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001c8 	.word	0x200001c8
 80016c0:	40005400 	.word	0x40005400
 80016c4:	000186a0 	.word	0x000186a0

080016c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <MX_TIM4_Init+0xe8>)
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <MX_TIM4_Init+0xec>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <MX_TIM4_Init+0xe8>)
 8001700:	f240 12df 	movw	r2, #479	; 0x1df
 8001704:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <MX_TIM4_Init+0xe8>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_TIM4_Init+0xe8>)
 800170e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001712:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_TIM4_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_TIM4_Init+0xe8>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001720:	4823      	ldr	r0, [pc, #140]	; (80017b0 <MX_TIM4_Init+0xe8>)
 8001722:	f001 fe89 	bl	8003438 <HAL_TIM_Base_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800172c:	f000 fa1a 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	4619      	mov	r1, r3
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <MX_TIM4_Init+0xe8>)
 800173e:	f002 f909 	bl	8003954 <HAL_TIM_ConfigClockSource>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001748:	f000 fa0c 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800174c:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_TIM4_Init+0xe8>)
 800174e:	f001 ff2b 	bl	80035a8 <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001758:	f000 fa04 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4619      	mov	r1, r3
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_TIM4_Init+0xe8>)
 800176c:	f002 fcc6 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001776:	f000 f9f5 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	; 0x60
 800177c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM4_Init+0xe8>)
 8001792:	f002 f821 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800179c:	f000 f9e2 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM4_Init+0xe8>)
 80017a2:	f000 fac5 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000180 	.word	0x20000180
 80017b4:	40000800 	.word	0x40000800

080017b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_TIM10_Init+0x94>)
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <MX_TIM10_Init+0x98>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_TIM10_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_TIM10_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_TIM10_Init+0x94>)
 80017e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_TIM10_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_TIM10_Init+0x94>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017f6:	4815      	ldr	r0, [pc, #84]	; (800184c <MX_TIM10_Init+0x94>)
 80017f8:	f001 fe1e 	bl	8003438 <HAL_TIM_Base_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001802:	f000 f9af 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <MX_TIM10_Init+0x94>)
 8001808:	f001 fece 	bl	80035a8 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001812:	f000 f9a7 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001816:	2360      	movs	r3, #96	; 0x60
 8001818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_TIM10_Init+0x94>)
 800182e:	f001 ffd3 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001838:	f000 f994 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_TIM10_Init+0x94>)
 800183e:	f000 fa77 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000021c 	.word	0x2000021c
 8001850:	40014400 	.word	0x40014400

08001854 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_TIM12_Init+0x84>)
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <MX_TIM12_Init+0x88>)
 8001870:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_TIM12_Init+0x84>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_TIM12_Init+0x84>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_TIM12_Init+0x84>)
 8001880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001884:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_TIM12_Init+0x84>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_TIM12_Init+0x84>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001892:	4811      	ldr	r0, [pc, #68]	; (80018d8 <MX_TIM12_Init+0x84>)
 8001894:	f001 fe88 	bl	80035a8 <HAL_TIM_PWM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800189e:	f000 f961 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a2:	2360      	movs	r3, #96	; 0x60
 80018a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM12_Init+0x84>)
 80018ba:	f001 ff8d 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80018c4:	f000 f94e 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM12_Init+0x84>)
 80018ca:	f000 fa31 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002cc 	.word	0x200002cc
 80018dc:	40001800 	.word	0x40001800

080018e0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_TIM13_Init+0x94>)
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <MX_TIM13_Init+0x98>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 479;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM13_Init+0x94>)
 8001900:	f240 12df 	movw	r2, #479	; 0x1df
 8001904:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM13_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_TIM13_Init+0x94>)
 800190e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001912:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_TIM13_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM13_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001920:	4814      	ldr	r0, [pc, #80]	; (8001974 <MX_TIM13_Init+0x94>)
 8001922:	f001 fd89 	bl	8003438 <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800192c:	f000 f91a 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001930:	4810      	ldr	r0, [pc, #64]	; (8001974 <MX_TIM13_Init+0x94>)
 8001932:	f001 fe39 	bl	80035a8 <HAL_TIM_PWM_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800193c:	f000 f912 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM13_Init+0x94>)
 8001958:	f001 ff3e 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001962:	f000 f8ff 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM13_Init+0x94>)
 8001968:	f000 f9e2 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000268 	.word	0x20000268
 8001978:	40001c00 	.word	0x40001c00

0800197c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_USART2_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART2_UART_Init+0x4c>)
 80019b4:	f002 fc1e 	bl	80041f4 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f000 f8d1 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000013c 	.word	0x2000013c
 80019cc:	40004400 	.word	0x40004400

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <MX_GPIO_Init+0x180>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <MX_GPIO_Init+0x180>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <MX_GPIO_Init+0x180>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a43      	ldr	r2, [pc, #268]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <MX_GPIO_Init+0x180>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001a94:	482f      	ldr	r0, [pc, #188]	; (8001b54 <MX_GPIO_Init+0x184>)
 8001a96:	f000 fee3 	bl	8002860 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f24a 013c 	movw	r1, #41020	; 0xa03c
 8001aa0:	482d      	ldr	r0, [pc, #180]	; (8001b58 <MX_GPIO_Init+0x188>)
 8001aa2:	f000 fedd 	bl	8002860 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aa6:	233c      	movs	r3, #60	; 0x3c
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4828      	ldr	r0, [pc, #160]	; (8001b5c <MX_GPIO_Init+0x18c>)
 8001aba:	f000 fd1d 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001abe:	230f      	movs	r3, #15
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ac2:	2311      	movs	r3, #17
 8001ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <MX_GPIO_Init+0x184>)
 8001ad6:	f000 fd0f 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 PD2 PD3
                           PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_3
 8001ada:	f24a 033c 	movw	r3, #41020	; 0xa03c
 8001ade:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4819      	ldr	r0, [pc, #100]	; (8001b58 <MX_GPIO_Init+0x188>)
 8001af4:	f000 fd00 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8001af8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <MX_GPIO_Init+0x188>)
 8001b0e:	f000 fcf3 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480a      	ldr	r0, [pc, #40]	; (8001b54 <MX_GPIO_Init+0x184>)
 8001b2c:	f000 fce4 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b30:	2338      	movs	r3, #56	; 0x38
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_GPIO_Init+0x190>)
 8001b44:	f000 fcd8 	bl	80024f8 <HAL_GPIO_Init>

}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40020400 	.word	0x40020400

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_I2C_MspInit+0x84>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12b      	bne.n	8001c3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_I2C_MspInit+0x8c>)
 8001c1a:	f000 fc6d 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005400 	.word	0x40005400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020400 	.word	0x40020400

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_TIM_Base_MspInit+0x8c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001c7e:	e026      	b.n	8001cce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_TIM_Base_MspInit+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10e      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
}
 8001ca6:	e012      	b.n	8001cce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM13)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_TIM_Base_MspInit+0x98>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10d      	bne.n	8001cce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_TIM_Base_MspInit+0x90>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40014400 	.word	0x40014400
 8001ce8:	40001c00 	.word	0x40001c00

08001cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10d      	bne.n	8001d1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_PWM_MspInit+0x40>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_TIM_PWM_MspInit+0x40>)
 8001d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_TIM_PWM_MspInit+0x40>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40001800 	.word	0x40001800
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_TIM_MspPostInit+0x144>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11f      	bne.n	8001d92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d80:	2302      	movs	r3, #2
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	483c      	ldr	r0, [pc, #240]	; (8001e7c <HAL_TIM_MspPostInit+0x14c>)
 8001d8c:	f000 fbb4 	bl	80024f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001d90:	e06c      	b.n	8001e6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM10)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <HAL_TIM_MspPostInit+0x150>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d11f      	bne.n	8001ddc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	482b      	ldr	r0, [pc, #172]	; (8001e84 <HAL_TIM_MspPostInit+0x154>)
 8001dd6:	f000 fb8f 	bl	80024f8 <HAL_GPIO_Init>
}
 8001dda:	e047      	b.n	8001e6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <HAL_TIM_MspPostInit+0x158>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11f      	bne.n	8001e26 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e14:	2309      	movs	r3, #9
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4819      	ldr	r0, [pc, #100]	; (8001e84 <HAL_TIM_MspPostInit+0x154>)
 8001e20:	f000 fb6a 	bl	80024f8 <HAL_GPIO_Init>
}
 8001e24:	e022      	b.n	8001e6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM13)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_TIM_MspPostInit+0x15c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d11d      	bne.n	8001e6c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_MspPostInit+0x148>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4c:	2340      	movs	r3, #64	; 0x40
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e5c:	2309      	movs	r3, #9
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <HAL_TIM_MspPostInit+0x160>)
 8001e68:	f000 fb46 	bl	80024f8 <HAL_GPIO_Init>
}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	; 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40014400 	.word	0x40014400
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40001800 	.word	0x40001800
 8001e8c:	40001c00 	.word	0x40001c00
 8001e90:	40020000 	.word	0x40020000

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_UART_MspInit+0x94>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d133      	bne.n	8001f1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_UART_MspInit+0x98>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eee:	230c      	movs	r3, #12
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efe:	2307      	movs	r3, #7
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4809      	ldr	r0, [pc, #36]	; (8001f30 <HAL_UART_MspInit+0x9c>)
 8001f0a:	f000 faf5 	bl	80024f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2026      	movs	r0, #38	; 0x26
 8001f14:	f000 fa27 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f18:	2026      	movs	r0, #38	; 0x26
 8001f1a:	f000 fa40 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f8d2 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <USART2_IRQHandler+0x14>)
 8001f8e:	f7fe fd87 	bl	8000aa0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f92:	4802      	ldr	r0, [pc, #8]	; (8001f9c <USART2_IRQHandler+0x14>)
 8001f94:	f002 f97c 	bl	8004290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000013c 	.word	0x2000013c

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f002 fe3c 	bl	8004c4c <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000128 	.word	0x20000128
 8002008:	20000328 	.word	0x20000328

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800204c:	4c0b      	ldr	r4, [pc, #44]	; (800207c <LoopFillZerobss+0x26>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800205a:	f7ff ffd7 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205e:	f002 fdfb 	bl	8004c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002062:	f7ff f8c5 	bl	80011f0 <main>
  bx  lr    
 8002066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002074:	080056e8 	.word	0x080056e8
  ldr r2, =_sbss
 8002078:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800207c:	20000328 	.word	0x20000328

08002080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <HAL_Init+0x40>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_Init+0x40>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_Init+0x40>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f94f 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f808 	bl	80020c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fd5a 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f967 	bl	80023ba <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 f92f 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000008 	.word	0x20000008
 8002120:	20000010 	.word	0x20000010
 8002124:	2000000c 	.word	0x2000000c

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x20>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x24>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_IncTick+0x24>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010
 800214c:	20000314 	.word	0x20000314

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000314 	.word	0x20000314

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffde 	bl	8002150 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000010 	.word	0x20000010

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff29 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff3e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff31 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff feb6 	bl	8002150 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d008      	beq.n	8002404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e052      	b.n	80024aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0216 	bic.w	r2, r2, #22
 8002412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_DMA_Abort+0x62>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0208 	bic.w	r2, r2, #8
 8002442:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002454:	e013      	b.n	800247e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002456:	f7ff fe7b 	bl	8002150 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b05      	cmp	r3, #5
 8002462:	d90c      	bls.n	800247e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e015      	b.n	80024aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e4      	bne.n	8002456 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00c      	b.n	80024ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2205      	movs	r2, #5
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e16b      	b.n	80027ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 815a 	bne.w	80027e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80b4 	beq.w	80027e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_GPIO_Init+0x30c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <HAL_GPIO_Init+0x310>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_GPIO_Init+0x314>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x318>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x31c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x320>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x21a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_GPIO_Init+0x324>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x216>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x328>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x212>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <HAL_GPIO_Init+0x32c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x20e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <HAL_GPIO_Init+0x330>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x20a>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00e      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002702:	2308      	movs	r3, #8
 8002704:	e00c      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002706:	2306      	movs	r3, #6
 8002708:	e00a      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270a:	2305      	movs	r3, #5
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270e:	2304      	movs	r3, #4
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271e:	2300      	movs	r3, #0
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	4935      	ldr	r1, [pc, #212]	; (8002808 <HAL_GPIO_Init+0x310>)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_GPIO_Init+0x334>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002762:	4a32      	ldr	r2, [pc, #200]	; (800282c <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_GPIO_Init+0x334>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278c:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_GPIO_Init+0x334>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_GPIO_Init+0x334>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_GPIO_Init+0x334>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_GPIO_Init+0x334>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f ae90 	bls.w	8002514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40021400 	.word	0x40021400
 8002824:	40021800 	.word	0x40021800
 8002828:	40021c00 	.word	0x40021c00
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	041a      	lsls	r2, r3, #16
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	400b      	ands	r3, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e12b      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff f966 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800292c:	f000 fd5c 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d807      	bhi.n	800294c <HAL_I2C_Init+0x84>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a80      	ldr	r2, [pc, #512]	; (8002b40 <HAL_I2C_Init+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e006      	b.n	800295a <HAL_I2C_Init+0x92>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_I2C_Init+0x27c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0e7      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a78      	ldr	r2, [pc, #480]	; (8002b48 <HAL_I2C_Init+0x280>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d802      	bhi.n	800299c <HAL_I2C_Init+0xd4>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	e009      	b.n	80029b0 <HAL_I2C_Init+0xe8>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <HAL_I2C_Init+0x284>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	495c      	ldr	r1, [pc, #368]	; (8002b3c <HAL_I2C_Init+0x274>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d819      	bhi.n	8002a04 <HAL_I2C_Init+0x13c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e59      	subs	r1, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fbb1 f3f3 	udiv	r3, r1, r3
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e4:	400b      	ands	r3, r1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_I2C_Init+0x138>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e59      	subs	r1, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	e051      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e04f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_I2C_Init+0x168>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e012      	b.n	8002a56 <HAL_I2C_Init+0x18e>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e58      	subs	r0, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	0099      	lsls	r1, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x196>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e022      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10e      	bne.n	8002a84 <HAL_I2C_Init+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e58      	subs	r0, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	e00f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e58      	subs	r0, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6911      	ldr	r1, [r2, #16]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	000186a0 	.word	0x000186a0
 8002b40:	001e847f 	.word	0x001e847f
 8002b44:	003d08ff 	.word	0x003d08ff
 8002b48:	431bde83 	.word	0x431bde83
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e264      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d075      	beq.n	8002c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	4ba3      	ldr	r3, [pc, #652]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4ba0      	ldr	r3, [pc, #640]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d112      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d157      	bne.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e23f      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x74>
 8002bb6:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a90      	ldr	r2, [pc, #576]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8a      	ldr	r2, [pc, #552]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002be8:	4b84      	ldr	r3, [pc, #528]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a83      	ldr	r2, [pc, #524]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff faa2 	bl	8002150 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff fa9e 	bl	8002150 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e204      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff fa8e 	bl	8002150 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff fa8a 	bl	8002150 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1f0      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1c4      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4952      	ldr	r1, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fa43 	bl	8002150 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7ff fa3f 	bl	8002150 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1a5      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4940      	ldr	r1, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff fa22 	bl	8002150 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7ff fa1e 	bl	8002150 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e184      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d030      	beq.n	8002d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7ff fa02 	bl	8002150 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7ff f9fe 	bl	8002150 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e164      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x200>
 8002d6e:	e015      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7ff f9eb 	bl	8002150 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff f9e7 	bl	8002150 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e14d      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a0 	beq.w	8002eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7ff f9ad 	bl	8002150 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e011      	b.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	42470e80 	.word	0x42470e80
 8002e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7ff f9a0 	bl	8002150 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e106      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x4e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a80      	ldr	r2, [pc, #512]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e48:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a7a      	ldr	r2, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b78      	ldr	r3, [pc, #480]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a77      	ldr	r2, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e62:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a74      	ldr	r2, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a71      	ldr	r2, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7ff f965 	bl	8002150 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7ff f961 	bl	8002150 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0c5      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ee      	beq.n	8002e8a <HAL_RCC_OscConfig+0x33a>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7ff f94f 	bl	8002150 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7ff f94b 	bl	8002150 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0af      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a55      	ldr	r2, [pc, #340]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 809b 	beq.w	800302a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d05c      	beq.n	8002fba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d141      	bne.n	8002f8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7ff f91f 	bl	8002150 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7ff f91b 	bl	8002150 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e081      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	019b      	lsls	r3, r3, #6
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff f8f4 	bl	8002150 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7ff f8f0 	bl	8002150 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e056      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f8a:	e04e      	b.n	800302a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7ff f8dd 	bl	8002150 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7ff f8d9 	bl	8002150 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03f      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x44a>
 8002fb8:	e037      	b.n	800302a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e032      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d028      	beq.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d121      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d11a      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ffc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40007000 	.word	0x40007000
 8003038:	40023800 	.word	0x40023800
 800303c:	42470060 	.word	0x42470060

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0cc      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d90c      	bls.n	800307c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d044      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d119      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e067      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4934      	ldr	r1, [pc, #208]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7ff f80e 	bl	8002150 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7ff f80a 	bl	8002150 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e04f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d20c      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe ff6e 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	0800568c 	.word	0x0800568c
 8003204:	20000008 	.word	0x20000008
 8003208:	2000000c 	.word	0x2000000c

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	2300      	movs	r3, #0
 800321e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003224:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d00d      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003230:	2b08      	cmp	r3, #8
 8003232:	f200 80bd 	bhi.w	80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x34>
 800323a:	2b04      	cmp	r3, #4
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x3a>
 800323e:	e0b7      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003242:	60bb      	str	r3, [r7, #8]
       break;
 8003244:	e0b7      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003248:	60bb      	str	r3, [r7, #8]
      break;
 800324a:	e0b4      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d04d      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003262:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	ea02 0800 	and.w	r8, r2, r0
 800327a:	ea03 0901 	and.w	r9, r3, r1
 800327e:	4640      	mov	r0, r8
 8003280:	4649      	mov	r1, r9
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	014b      	lsls	r3, r1, #5
 800328c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003290:	0142      	lsls	r2, r0, #5
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	ebb0 0008 	subs.w	r0, r0, r8
 800329a:	eb61 0109 	sbc.w	r1, r1, r9
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ac:	0182      	lsls	r2, r0, #6
 80032ae:	1a12      	subs	r2, r2, r0
 80032b0:	eb63 0301 	sbc.w	r3, r3, r1
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f04f 0100 	mov.w	r1, #0
 80032bc:	00d9      	lsls	r1, r3, #3
 80032be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c2:	00d0      	lsls	r0, r2, #3
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	eb12 0208 	adds.w	r2, r2, r8
 80032cc:	eb43 0309 	adc.w	r3, r3, r9
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0259      	lsls	r1, r3, #9
 80032da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032de:	0250      	lsls	r0, r2, #9
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f7fc ffc6 	bl	8000280 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e04a      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	461a      	mov	r2, r3
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	ea02 0400 	and.w	r4, r2, r0
 8003316:	ea03 0501 	and.w	r5, r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	014b      	lsls	r3, r1, #5
 8003328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800332c:	0142      	lsls	r2, r0, #5
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	1b00      	subs	r0, r0, r4
 8003334:	eb61 0105 	sbc.w	r1, r1, r5
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	018b      	lsls	r3, r1, #6
 8003342:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003346:	0182      	lsls	r2, r0, #6
 8003348:	1a12      	subs	r2, r2, r0
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	00d9      	lsls	r1, r3, #3
 8003358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800335c:	00d0      	lsls	r0, r2, #3
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	1912      	adds	r2, r2, r4
 8003364:	eb45 0303 	adc.w	r3, r5, r3
 8003368:	f04f 0000 	mov.w	r0, #0
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	0299      	lsls	r1, r3, #10
 8003372:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003376:	0290      	lsls	r0, r2, #10
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f7fc ff7a 	bl	8000280 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	60bb      	str	r3, [r7, #8]
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033b2:	60bb      	str	r3, [r7, #8]
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	68bb      	ldr	r3, [r7, #8]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	0800569c 	.word	0x0800569c

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003414:	f7ff ffdc 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0b5b      	lsrs	r3, r3, #13
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	0800569c 	.word	0x0800569c

08003438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e041      	b.n	80034ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fbf6 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fb30 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e046      	b.n	800357e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a23      	ldr	r2, [pc, #140]	; (800358c <HAL_TIM_Base_Start+0xb4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d022      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d01d      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_TIM_Base_Start+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_TIM_Base_Start+0xbc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_TIM_Base_Start+0xc0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_TIM_Base_Start+0xc4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <HAL_TIM_Base_Start+0xc8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_Base_Start+0x70>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_TIM_Base_Start+0xcc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d111      	bne.n	800356c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b06      	cmp	r3, #6
 8003558:	d010      	beq.n	800357c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356a:	e007      	b.n	800357c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40010000 	.word	0x40010000
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800
 8003598:	40000c00 	.word	0x40000c00
 800359c:	40010400 	.word	0x40010400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40001800 	.word	0x40001800

080035a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e041      	b.n	800363e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fb8c 	bl	8001cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 fa78 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_TIM_PWM_Start+0x24>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e022      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d109      	bne.n	8003686 <HAL_TIM_PWM_Start+0x3e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e015      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x58>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e008      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07c      	b.n	80037b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_TIM_PWM_Start+0x82>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	e013      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d104      	bne.n	80036da <HAL_TIM_PWM_Start+0x92>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d8:	e00b      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e8:	e003      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fcd8 	bl	80040b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_TIM_PWM_Start+0x174>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_PWM_Start+0xcc>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <HAL_TIM_PWM_Start+0x178>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Start+0xd0>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_TIM_PWM_Start+0xd2>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_TIM_PWM_Start+0x174>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d01d      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_TIM_PWM_Start+0x17c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_TIM_PWM_Start+0x180>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_PWM_Start+0x184>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_PWM_Start+0x178>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_PWM_Start+0x188>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_TIM_PWM_Start+0x18c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d111      	bne.n	80037a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b06      	cmp	r3, #6
 800378e:	d010      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	e007      	b.n	80037b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40001800 	.word	0x40001800

080037d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0ac      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x174>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	f200 809f 	bhi.w	8003940 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003941 	.word	0x08003941
 8003810:	08003941 	.word	0x08003941
 8003814:	08003941 	.word	0x08003941
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003941 	.word	0x08003941
 8003820:	08003941 	.word	0x08003941
 8003824:	08003941 	.word	0x08003941
 8003828:	080038bf 	.word	0x080038bf
 800382c:	08003941 	.word	0x08003941
 8003830:	08003941 	.word	0x08003941
 8003834:	08003941 	.word	0x08003941
 8003838:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f9ea 	bl	8003c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	619a      	str	r2, [r3, #24]
      break;
 800387a:	e062      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fa3a 	bl	8003cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6999      	ldr	r1, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	021a      	lsls	r2, r3, #8
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	619a      	str	r2, [r3, #24]
      break;
 80038bc:	e041      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fa8f 	bl	8003de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0208 	orr.w	r2, r2, #8
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0204 	bic.w	r2, r2, #4
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
      break;
 80038fc:	e021      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fae3 	bl	8003ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69d9      	ldr	r1, [r3, #28]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e000      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIM_ConfigClockSource+0x18>
 8003968:	2302      	movs	r3, #2
 800396a:	e0b3      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x180>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800398a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a4:	d03e      	beq.n	8003a24 <HAL_TIM_ConfigClockSource+0xd0>
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039aa:	f200 8087 	bhi.w	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	f000 8085 	beq.w	8003ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d87f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d01a      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0xa2>
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d87b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039c4:	2b60      	cmp	r3, #96	; 0x60
 80039c6:	d050      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x116>
 80039c8:	2b60      	cmp	r3, #96	; 0x60
 80039ca:	d877      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039cc:	2b50      	cmp	r3, #80	; 0x50
 80039ce:	d03c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xf6>
 80039d0:	2b50      	cmp	r3, #80	; 0x50
 80039d2:	d873      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d058      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x136>
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d86f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039dc:	2b30      	cmp	r3, #48	; 0x30
 80039de:	d064      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x156>
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d86b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d060      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x156>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d867      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x156>
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d05a      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039f4:	e062      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f000 fb33 	bl	8004070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	609a      	str	r2, [r3, #8]
      break;
 8003a22:	e04e      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f000 fb1c 	bl	8004070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a46:	609a      	str	r2, [r3, #8]
      break;
 8003a48:	e03b      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 fa90 	bl	8003f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2150      	movs	r1, #80	; 0x50
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fae9 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003a68:	e02b      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 faaf 	bl	8003fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2160      	movs	r1, #96	; 0x60
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fad9 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003a88:	e01b      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f000 fa70 	bl	8003f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fac9 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e00b      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 fac0 	bl	800403a <TIM_ITRx_SetConfig>
        break;
 8003aba:	e002      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ac0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d027      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d023      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d017      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xf8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40001c00 	.word	0x40001c00
 8003c18:	40002000 	.word	0x40002000

08003c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 0302 	bic.w	r3, r3, #2
 8003c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <TIM_OC1_SetConfig+0xd8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC1_SetConfig+0x64>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <TIM_OC1_SetConfig+0xdc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0308 	bic.w	r3, r3, #8
 8003c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <TIM_OC1_SetConfig+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_OC1_SetConfig+0x8e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <TIM_OC1_SetConfig+0xdc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	621a      	str	r2, [r3, #32]
}
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40010400 	.word	0x40010400

08003cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0210 	bic.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <TIM_OC2_SetConfig+0xe4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_OC2_SetConfig+0x68>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <TIM_OC2_SetConfig+0xe8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10d      	bne.n	8003d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <TIM_OC2_SetConfig+0xe4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_OC2_SetConfig+0x94>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <TIM_OC2_SetConfig+0xe8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d113      	bne.n	8003db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400

08003de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <TIM_OC3_SetConfig+0xe0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC3_SetConfig+0x66>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10d      	bne.n	8003e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <TIM_OC3_SetConfig+0xe0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC3_SetConfig+0x92>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d113      	bne.n	8003ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <TIM_OC4_SetConfig+0xa4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC4_SetConfig+0x68>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <TIM_OC4_SetConfig+0xa8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d109      	bne.n	8003f4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010400 	.word	0x40010400

08003f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 030a 	bic.w	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0210 	bic.w	r2, r3, #16
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	031b      	lsls	r3, r3, #12
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	f043 0307 	orr.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	021a      	lsls	r2, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2201      	movs	r2, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e05a      	b.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d022      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d01d      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d018      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00e      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10c      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40001800 	.word	0x40001800

080041f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e03f      	b.n	8004286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd fe3a 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fb3f 	bl	80048bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10d      	bne.n	80042e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_UART_IRQHandler+0x52>
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fa57 	bl	800478e <UART_Receive_IT>
      return;
 80042e0:	e17c      	b.n	80045dc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80b1 	beq.w	800444c <HAL_UART_IRQHandler+0x1bc>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_UART_IRQHandler+0x70>
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a6 	beq.w	800444c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_UART_IRQHandler+0x90>
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_UART_IRQHandler+0xb0>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_UART_IRQHandler+0xd0>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00f      	beq.n	800438a <HAL_UART_IRQHandler+0xfa>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_UART_IRQHandler+0xee>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0208 	orr.w	r2, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 811f 	beq.w	80045d2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_UART_IRQHandler+0x11e>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f9f0 	bl	800478e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d102      	bne.n	80043d6 <HAL_UART_IRQHandler+0x146>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d031      	beq.n	800443a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f930 	bl	800463c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d123      	bne.n	8004432 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d013      	beq.n	800442a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	4a77      	ldr	r2, [pc, #476]	; (80045e4 <HAL_UART_IRQHandler+0x354>)
 8004408:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe f84f 	bl	80024b2 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00e      	b.n	8004448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8f0 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00a      	b.n	8004448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8ec 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e006      	b.n	8004448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8e8 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004446:	e0c4      	b.n	80045d2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	bf00      	nop
    return;
 800444a:	e0c2      	b.n	80045d2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 80a2 	bne.w	800459a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 809c 	beq.w	800459a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8096 	beq.w	800459a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d14f      	bne.n	8004532 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800449c:	8a3b      	ldrh	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8099 	beq.w	80045d6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a8:	8a3a      	ldrh	r2, [r7, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f080 8093 	bcs.w	80045d6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8a3a      	ldrh	r2, [r7, #16]
 80044b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d02b      	beq.n	800451a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0210 	bic.w	r2, r2, #16
 800450e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	4618      	mov	r0, r3
 8004516:	f7fd ff5c 	bl	80023d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004522:	b29b      	uxth	r3, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	b29b      	uxth	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f87a 	bl	8004624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004530:	e051      	b.n	80045d6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800453a:	b29b      	uxth	r3, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d047      	beq.n	80045da <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800454a:	8a7b      	ldrh	r3, [r7, #18]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d044      	beq.n	80045da <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800455e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0210 	bic.w	r2, r2, #16
 800458c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800458e:	8a7b      	ldrh	r3, [r7, #18]
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f846 	bl	8004624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004598:	e01f      	b.n	80045da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_UART_IRQHandler+0x326>
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f885 	bl	80046be <UART_Transmit_IT>
    return;
 80045b4:	e012      	b.n	80045dc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <HAL_UART_IRQHandler+0x34c>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8c7 	bl	800475e <UART_EndTransmit_IT>
    return;
 80045d0:	e004      	b.n	80045dc <HAL_UART_IRQHandler+0x34c>
    return;
 80045d2:	bf00      	nop
 80045d4:	e002      	b.n	80045dc <HAL_UART_IRQHandler+0x34c>
      return;
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <HAL_UART_IRQHandler+0x34c>
      return;
 80045da:	bf00      	nop
  }
}
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	08004697 	.word	0x08004697

080045e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004652:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0210 	bic.w	r2, r2, #16
 800467a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff ffad 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b21      	cmp	r3, #33	; 0x21
 80046d0:	d13e      	bne.n	8004750 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d114      	bne.n	8004706 <UART_Transmit_IT+0x48>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d110      	bne.n	8004706 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]
 8004704:	e008      	b.n	8004718 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6211      	str	r1, [r2, #32]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004774:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ff32 	bl	80045e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b22      	cmp	r3, #34	; 0x22
 80047a0:	f040 8087 	bne.w	80048b2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d117      	bne.n	80047de <UART_Receive_IT+0x50>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	e026      	b.n	800482c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d007      	beq.n	8004802 <UART_Receive_IT+0x74>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <UART_Receive_IT+0x82>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e008      	b.n	8004822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4619      	mov	r1, r3
 800483a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800483c:	2b00      	cmp	r3, #0
 800483e:	d136      	bne.n	80048ae <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0220 	bic.w	r2, r2, #32
 800484e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10e      	bne.n	800489e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0210 	bic.w	r2, r2, #16
 800488e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fec4 	bl	8004624 <HAL_UARTEx_RxEventCallback>
 800489c:	e002      	b.n	80048a4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff feac 	bl	80045fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e002      	b.n	80048b4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	b09f      	sub	sp, #124	; 0x7c
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	ea40 0301 	orr.w	r3, r0, r1
 80048dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004900:	f021 010c 	bic.w	r1, r1, #12
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490a:	430b      	orrs	r3, r1
 800490c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	ea40 0301 	orr.w	r3, r0, r1
 8004924:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4bc5      	ldr	r3, [pc, #788]	; (8004c40 <UART_SetConfig+0x384>)
 800492c:	429a      	cmp	r2, r3
 800492e:	d004      	beq.n	800493a <UART_SetConfig+0x7e>
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4bc3      	ldr	r3, [pc, #780]	; (8004c44 <UART_SetConfig+0x388>)
 8004936:	429a      	cmp	r2, r3
 8004938:	d103      	bne.n	8004942 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800493a:	f7fe fd69 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 800493e:	6778      	str	r0, [r7, #116]	; 0x74
 8004940:	e002      	b.n	8004948 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004942:	f7fe fd51 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8004946:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	f040 80b6 	bne.w	8004ac0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004956:	461c      	mov	r4, r3
 8004958:	f04f 0500 	mov.w	r5, #0
 800495c:	4622      	mov	r2, r4
 800495e:	462b      	mov	r3, r5
 8004960:	1891      	adds	r1, r2, r2
 8004962:	6439      	str	r1, [r7, #64]	; 0x40
 8004964:	415b      	adcs	r3, r3
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
 8004968:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800496c:	1912      	adds	r2, r2, r4
 800496e:	eb45 0303 	adc.w	r3, r5, r3
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	00d9      	lsls	r1, r3, #3
 800497c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004980:	00d0      	lsls	r0, r2, #3
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	1911      	adds	r1, r2, r4
 8004988:	6639      	str	r1, [r7, #96]	; 0x60
 800498a:	416b      	adcs	r3, r5
 800498c:	667b      	str	r3, [r7, #100]	; 0x64
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	461a      	mov	r2, r3
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	1891      	adds	r1, r2, r2
 800499a:	63b9      	str	r1, [r7, #56]	; 0x38
 800499c:	415b      	adcs	r3, r3
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049a8:	f7fb fc6a 	bl	8000280 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4ba5      	ldr	r3, [pc, #660]	; (8004c48 <UART_SetConfig+0x38c>)
 80049b2:	fba3 2302 	umull	r2, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	011e      	lsls	r6, r3, #4
 80049ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049bc:	461c      	mov	r4, r3
 80049be:	f04f 0500 	mov.w	r5, #0
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ca:	415b      	adcs	r3, r3
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
 80049ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049d2:	1912      	adds	r2, r2, r4
 80049d4:	eb45 0303 	adc.w	r3, r5, r3
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	00d9      	lsls	r1, r3, #3
 80049e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e6:	00d0      	lsls	r0, r2, #3
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	1911      	adds	r1, r2, r4
 80049ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80049f0:	416b      	adcs	r3, r5
 80049f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a02:	415b      	adcs	r3, r3
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a0e:	f7fb fc37 	bl	8000280 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4b8c      	ldr	r3, [pc, #560]	; (8004c48 <UART_SetConfig+0x38c>)
 8004a18:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a87      	ldr	r2, [pc, #540]	; (8004c48 <UART_SetConfig+0x38c>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a38:	441e      	add	r6, r3
 8004a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	1894      	adds	r4, r2, r2
 8004a48:	623c      	str	r4, [r7, #32]
 8004a4a:	415b      	adcs	r3, r3
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a52:	1812      	adds	r2, r2, r0
 8004a54:	eb41 0303 	adc.w	r3, r1, r3
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	f04f 0500 	mov.w	r5, #0
 8004a60:	00dd      	lsls	r5, r3, #3
 8004a62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a66:	00d4      	lsls	r4, r2, #3
 8004a68:	4622      	mov	r2, r4
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	1814      	adds	r4, r2, r0
 8004a6e:	653c      	str	r4, [r7, #80]	; 0x50
 8004a70:	414b      	adcs	r3, r1
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
 8004a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	1891      	adds	r1, r2, r2
 8004a80:	61b9      	str	r1, [r7, #24]
 8004a82:	415b      	adcs	r3, r3
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a8e:	f7fb fbf7 	bl	8000280 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <UART_SetConfig+0x38c>)
 8004a98:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2164      	movs	r1, #100	; 0x64
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	3332      	adds	r3, #50	; 0x32
 8004aaa:	4a67      	ldr	r2, [pc, #412]	; (8004c48 <UART_SetConfig+0x38c>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 0207 	and.w	r2, r3, #7
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4432      	add	r2, r6
 8004abc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004abe:	e0b9      	b.n	8004c34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	f04f 0500 	mov.w	r5, #0
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	6139      	str	r1, [r7, #16]
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ad8:	1912      	adds	r2, r2, r4
 8004ada:	eb45 0303 	adc.w	r3, r5, r3
 8004ade:	f04f 0000 	mov.w	r0, #0
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	00d9      	lsls	r1, r3, #3
 8004ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aec:	00d0      	lsls	r0, r2, #3
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	eb12 0804 	adds.w	r8, r2, r4
 8004af6:	eb43 0905 	adc.w	r9, r3, r5
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b12:	0082      	lsls	r2, r0, #2
 8004b14:	4640      	mov	r0, r8
 8004b16:	4649      	mov	r1, r9
 8004b18:	f7fb fbb2 	bl	8000280 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b49      	ldr	r3, [pc, #292]	; (8004c48 <UART_SetConfig+0x38c>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011e      	lsls	r6, r3, #4
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	1894      	adds	r4, r2, r2
 8004b38:	60bc      	str	r4, [r7, #8]
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b42:	1812      	adds	r2, r2, r0
 8004b44:	eb41 0303 	adc.w	r3, r1, r3
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	f04f 0500 	mov.w	r5, #0
 8004b50:	00dd      	lsls	r5, r3, #3
 8004b52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b56:	00d4      	lsls	r4, r2, #3
 8004b58:	4622      	mov	r2, r4
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	1814      	adds	r4, r2, r0
 8004b5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b60:	414b      	adcs	r3, r1
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	008b      	lsls	r3, r1, #2
 8004b78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b7c:	0082      	lsls	r2, r0, #2
 8004b7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b82:	f7fb fb7d 	bl	8000280 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <UART_SetConfig+0x38c>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	2164      	movs	r1, #100	; 0x64
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	3332      	adds	r3, #50	; 0x32
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <UART_SetConfig+0x38c>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004baa:	441e      	add	r6, r3
 8004bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f04f 0100 	mov.w	r1, #0
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	1894      	adds	r4, r2, r2
 8004bba:	603c      	str	r4, [r7, #0]
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc4:	1812      	adds	r2, r2, r0
 8004bc6:	eb41 0303 	adc.w	r3, r1, r3
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	f04f 0500 	mov.w	r5, #0
 8004bd2:	00dd      	lsls	r5, r3, #3
 8004bd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bd8:	00d4      	lsls	r4, r2, #3
 8004bda:	4622      	mov	r2, r4
 8004bdc:	462b      	mov	r3, r5
 8004bde:	eb12 0a00 	adds.w	sl, r2, r0
 8004be2:	eb43 0b01 	adc.w	fp, r3, r1
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	008b      	lsls	r3, r1, #2
 8004bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfe:	0082      	lsls	r2, r0, #2
 8004c00:	4650      	mov	r0, sl
 8004c02:	4659      	mov	r1, fp
 8004c04:	f7fb fb3c 	bl	8000280 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <UART_SetConfig+0x38c>)
 8004c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2164      	movs	r1, #100	; 0x64
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	3332      	adds	r3, #50	; 0x32
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <UART_SetConfig+0x38c>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	f003 020f 	and.w	r2, r3, #15
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4432      	add	r2, r6
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	377c      	adds	r7, #124	; 0x7c
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	40011000 	.word	0x40011000
 8004c44:	40011400 	.word	0x40011400
 8004c48:	51eb851f 	.word	0x51eb851f

08004c4c <__errno>:
 8004c4c:	4b01      	ldr	r3, [pc, #4]	; (8004c54 <__errno+0x8>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000014 	.word	0x20000014

08004c58 <__libc_init_array>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4d0d      	ldr	r5, [pc, #52]	; (8004c90 <__libc_init_array+0x38>)
 8004c5c:	4c0d      	ldr	r4, [pc, #52]	; (8004c94 <__libc_init_array+0x3c>)
 8004c5e:	1b64      	subs	r4, r4, r5
 8004c60:	10a4      	asrs	r4, r4, #2
 8004c62:	2600      	movs	r6, #0
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	d109      	bne.n	8004c7c <__libc_init_array+0x24>
 8004c68:	4d0b      	ldr	r5, [pc, #44]	; (8004c98 <__libc_init_array+0x40>)
 8004c6a:	4c0c      	ldr	r4, [pc, #48]	; (8004c9c <__libc_init_array+0x44>)
 8004c6c:	f000 fc5c 	bl	8005528 <_init>
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	10a4      	asrs	r4, r4, #2
 8004c74:	2600      	movs	r6, #0
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	d105      	bne.n	8004c86 <__libc_init_array+0x2e>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c80:	4798      	blx	r3
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7ee      	b.n	8004c64 <__libc_init_array+0xc>
 8004c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8a:	4798      	blx	r3
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	e7f2      	b.n	8004c76 <__libc_init_array+0x1e>
 8004c90:	080056e0 	.word	0x080056e0
 8004c94:	080056e0 	.word	0x080056e0
 8004c98:	080056e0 	.word	0x080056e0
 8004c9c:	080056e4 	.word	0x080056e4

08004ca0 <memset>:
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d100      	bne.n	8004caa <memset+0xa>
 8004ca8:	4770      	bx	lr
 8004caa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cae:	e7f9      	b.n	8004ca4 <memset+0x4>

08004cb0 <siprintf>:
 8004cb0:	b40e      	push	{r1, r2, r3}
 8004cb2:	b500      	push	{lr}
 8004cb4:	b09c      	sub	sp, #112	; 0x70
 8004cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8004cb8:	9002      	str	r0, [sp, #8]
 8004cba:	9006      	str	r0, [sp, #24]
 8004cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cc0:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <siprintf+0x38>)
 8004cc2:	9107      	str	r1, [sp, #28]
 8004cc4:	9104      	str	r1, [sp, #16]
 8004cc6:	4909      	ldr	r1, [pc, #36]	; (8004cec <siprintf+0x3c>)
 8004cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	6800      	ldr	r0, [r0, #0]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	a902      	add	r1, sp, #8
 8004cd4:	f000 f876 	bl	8004dc4 <_svfiprintf_r>
 8004cd8:	9b02      	ldr	r3, [sp, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	b01c      	add	sp, #112	; 0x70
 8004ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce4:	b003      	add	sp, #12
 8004ce6:	4770      	bx	lr
 8004ce8:	20000014 	.word	0x20000014
 8004cec:	ffff0208 	.word	0xffff0208

08004cf0 <strcat>:
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	7814      	ldrb	r4, [r2, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	3201      	adds	r2, #1
 8004cfa:	2c00      	cmp	r4, #0
 8004cfc:	d1fa      	bne.n	8004cf4 <strcat+0x4>
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d08:	2a00      	cmp	r2, #0
 8004d0a:	d1f9      	bne.n	8004d00 <strcat+0x10>
 8004d0c:	bd10      	pop	{r4, pc}

08004d0e <__ssputs_r>:
 8004d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d12:	688e      	ldr	r6, [r1, #8]
 8004d14:	429e      	cmp	r6, r3
 8004d16:	4682      	mov	sl, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	4690      	mov	r8, r2
 8004d1c:	461f      	mov	r7, r3
 8004d1e:	d838      	bhi.n	8004d92 <__ssputs_r+0x84>
 8004d20:	898a      	ldrh	r2, [r1, #12]
 8004d22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d26:	d032      	beq.n	8004d8e <__ssputs_r+0x80>
 8004d28:	6825      	ldr	r5, [r4, #0]
 8004d2a:	6909      	ldr	r1, [r1, #16]
 8004d2c:	eba5 0901 	sub.w	r9, r5, r1
 8004d30:	6965      	ldr	r5, [r4, #20]
 8004d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	444b      	add	r3, r9
 8004d3e:	106d      	asrs	r5, r5, #1
 8004d40:	429d      	cmp	r5, r3
 8004d42:	bf38      	it	cc
 8004d44:	461d      	movcc	r5, r3
 8004d46:	0553      	lsls	r3, r2, #21
 8004d48:	d531      	bpl.n	8004dae <__ssputs_r+0xa0>
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f000 fb46 	bl	80053dc <_malloc_r>
 8004d50:	4606      	mov	r6, r0
 8004d52:	b950      	cbnz	r0, 8004d6a <__ssputs_r+0x5c>
 8004d54:	230c      	movs	r3, #12
 8004d56:	f8ca 3000 	str.w	r3, [sl]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6a:	6921      	ldr	r1, [r4, #16]
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	f000 fabd 	bl	80052ec <memcpy>
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	6126      	str	r6, [r4, #16]
 8004d80:	6165      	str	r5, [r4, #20]
 8004d82:	444e      	add	r6, r9
 8004d84:	eba5 0509 	sub.w	r5, r5, r9
 8004d88:	6026      	str	r6, [r4, #0]
 8004d8a:	60a5      	str	r5, [r4, #8]
 8004d8c:	463e      	mov	r6, r7
 8004d8e:	42be      	cmp	r6, r7
 8004d90:	d900      	bls.n	8004d94 <__ssputs_r+0x86>
 8004d92:	463e      	mov	r6, r7
 8004d94:	4632      	mov	r2, r6
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	4641      	mov	r1, r8
 8004d9a:	f000 fab5 	bl	8005308 <memmove>
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b9b      	subs	r3, r3, r6
 8004da4:	4432      	add	r2, r6
 8004da6:	60a3      	str	r3, [r4, #8]
 8004da8:	6022      	str	r2, [r4, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	e7db      	b.n	8004d66 <__ssputs_r+0x58>
 8004dae:	462a      	mov	r2, r5
 8004db0:	f000 fb6e 	bl	8005490 <_realloc_r>
 8004db4:	4606      	mov	r6, r0
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1e1      	bne.n	8004d7e <__ssputs_r+0x70>
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	f000 fabd 	bl	800533c <_free_r>
 8004dc2:	e7c7      	b.n	8004d54 <__ssputs_r+0x46>

08004dc4 <_svfiprintf_r>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	4698      	mov	r8, r3
 8004dca:	898b      	ldrh	r3, [r1, #12]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	b09d      	sub	sp, #116	; 0x74
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	d50e      	bpl.n	8004df6 <_svfiprintf_r+0x32>
 8004dd8:	690b      	ldr	r3, [r1, #16]
 8004dda:	b963      	cbnz	r3, 8004df6 <_svfiprintf_r+0x32>
 8004ddc:	2140      	movs	r1, #64	; 0x40
 8004dde:	f000 fafd 	bl	80053dc <_malloc_r>
 8004de2:	6028      	str	r0, [r5, #0]
 8004de4:	6128      	str	r0, [r5, #16]
 8004de6:	b920      	cbnz	r0, 8004df2 <_svfiprintf_r+0x2e>
 8004de8:	230c      	movs	r3, #12
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e0d1      	b.n	8004f96 <_svfiprintf_r+0x1d2>
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	616b      	str	r3, [r5, #20]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e04:	2330      	movs	r3, #48	; 0x30
 8004e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fb0 <_svfiprintf_r+0x1ec>
 8004e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e0e:	f04f 0901 	mov.w	r9, #1
 8004e12:	4623      	mov	r3, r4
 8004e14:	469a      	mov	sl, r3
 8004e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1a:	b10a      	cbz	r2, 8004e20 <_svfiprintf_r+0x5c>
 8004e1c:	2a25      	cmp	r2, #37	; 0x25
 8004e1e:	d1f9      	bne.n	8004e14 <_svfiprintf_r+0x50>
 8004e20:	ebba 0b04 	subs.w	fp, sl, r4
 8004e24:	d00b      	beq.n	8004e3e <_svfiprintf_r+0x7a>
 8004e26:	465b      	mov	r3, fp
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ff6e 	bl	8004d0e <__ssputs_r>
 8004e32:	3001      	adds	r0, #1
 8004e34:	f000 80aa 	beq.w	8004f8c <_svfiprintf_r+0x1c8>
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	445a      	add	r2, fp
 8004e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a2 	beq.w	8004f8c <_svfiprintf_r+0x1c8>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e52:	f10a 0a01 	add.w	sl, sl, #1
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	9307      	str	r3, [sp, #28]
 8004e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e60:	4654      	mov	r4, sl
 8004e62:	2205      	movs	r2, #5
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	4851      	ldr	r0, [pc, #324]	; (8004fb0 <_svfiprintf_r+0x1ec>)
 8004e6a:	f7fb f9b9 	bl	80001e0 <memchr>
 8004e6e:	9a04      	ldr	r2, [sp, #16]
 8004e70:	b9d8      	cbnz	r0, 8004eaa <_svfiprintf_r+0xe6>
 8004e72:	06d0      	lsls	r0, r2, #27
 8004e74:	bf44      	itt	mi
 8004e76:	2320      	movmi	r3, #32
 8004e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7c:	0711      	lsls	r1, r2, #28
 8004e7e:	bf44      	itt	mi
 8004e80:	232b      	movmi	r3, #43	; 0x2b
 8004e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e86:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8c:	d015      	beq.n	8004eba <_svfiprintf_r+0xf6>
 8004e8e:	9a07      	ldr	r2, [sp, #28]
 8004e90:	4654      	mov	r4, sl
 8004e92:	2000      	movs	r0, #0
 8004e94:	f04f 0c0a 	mov.w	ip, #10
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9e:	3b30      	subs	r3, #48	; 0x30
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	d94e      	bls.n	8004f42 <_svfiprintf_r+0x17e>
 8004ea4:	b1b0      	cbz	r0, 8004ed4 <_svfiprintf_r+0x110>
 8004ea6:	9207      	str	r2, [sp, #28]
 8004ea8:	e014      	b.n	8004ed4 <_svfiprintf_r+0x110>
 8004eaa:	eba0 0308 	sub.w	r3, r0, r8
 8004eae:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	46a2      	mov	sl, r4
 8004eb8:	e7d2      	b.n	8004e60 <_svfiprintf_r+0x9c>
 8004eba:	9b03      	ldr	r3, [sp, #12]
 8004ebc:	1d19      	adds	r1, r3, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	9103      	str	r1, [sp, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bfbb      	ittet	lt
 8004ec6:	425b      	neglt	r3, r3
 8004ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8004ecc:	9307      	strge	r3, [sp, #28]
 8004ece:	9307      	strlt	r3, [sp, #28]
 8004ed0:	bfb8      	it	lt
 8004ed2:	9204      	strlt	r2, [sp, #16]
 8004ed4:	7823      	ldrb	r3, [r4, #0]
 8004ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed8:	d10c      	bne.n	8004ef4 <_svfiprintf_r+0x130>
 8004eda:	7863      	ldrb	r3, [r4, #1]
 8004edc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ede:	d135      	bne.n	8004f4c <_svfiprintf_r+0x188>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	9203      	str	r2, [sp, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bfb8      	it	lt
 8004eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ef0:	3402      	adds	r4, #2
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fc0 <_svfiprintf_r+0x1fc>
 8004ef8:	7821      	ldrb	r1, [r4, #0]
 8004efa:	2203      	movs	r2, #3
 8004efc:	4650      	mov	r0, sl
 8004efe:	f7fb f96f 	bl	80001e0 <memchr>
 8004f02:	b140      	cbz	r0, 8004f16 <_svfiprintf_r+0x152>
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	eba0 000a 	sub.w	r0, r0, sl
 8004f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f0e:	9b04      	ldr	r3, [sp, #16]
 8004f10:	4303      	orrs	r3, r0
 8004f12:	3401      	adds	r4, #1
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1a:	4826      	ldr	r0, [pc, #152]	; (8004fb4 <_svfiprintf_r+0x1f0>)
 8004f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f20:	2206      	movs	r2, #6
 8004f22:	f7fb f95d 	bl	80001e0 <memchr>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d038      	beq.n	8004f9c <_svfiprintf_r+0x1d8>
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <_svfiprintf_r+0x1f4>)
 8004f2c:	bb1b      	cbnz	r3, 8004f76 <_svfiprintf_r+0x1b2>
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	3307      	adds	r3, #7
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	3308      	adds	r3, #8
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	4433      	add	r3, r6
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	e767      	b.n	8004e12 <_svfiprintf_r+0x4e>
 8004f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f46:	460c      	mov	r4, r1
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e7a5      	b.n	8004e98 <_svfiprintf_r+0xd4>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	3401      	adds	r4, #1
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 0c0a 	mov.w	ip, #10
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5e:	3a30      	subs	r2, #48	; 0x30
 8004f60:	2a09      	cmp	r2, #9
 8004f62:	d903      	bls.n	8004f6c <_svfiprintf_r+0x1a8>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c5      	beq.n	8004ef4 <_svfiprintf_r+0x130>
 8004f68:	9105      	str	r1, [sp, #20]
 8004f6a:	e7c3      	b.n	8004ef4 <_svfiprintf_r+0x130>
 8004f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f70:	4604      	mov	r4, r0
 8004f72:	2301      	movs	r3, #1
 8004f74:	e7f0      	b.n	8004f58 <_svfiprintf_r+0x194>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	4638      	mov	r0, r7
 8004f82:	f3af 8000 	nop.w
 8004f86:	1c42      	adds	r2, r0, #1
 8004f88:	4606      	mov	r6, r0
 8004f8a:	d1d6      	bne.n	8004f3a <_svfiprintf_r+0x176>
 8004f8c:	89ab      	ldrh	r3, [r5, #12]
 8004f8e:	065b      	lsls	r3, r3, #25
 8004f90:	f53f af2c 	bmi.w	8004dec <_svfiprintf_r+0x28>
 8004f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f96:	b01d      	add	sp, #116	; 0x74
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	ab03      	add	r3, sp, #12
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004fa4:	a904      	add	r1, sp, #16
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f000 f87a 	bl	80050a0 <_printf_i>
 8004fac:	e7eb      	b.n	8004f86 <_svfiprintf_r+0x1c2>
 8004fae:	bf00      	nop
 8004fb0:	080056a4 	.word	0x080056a4
 8004fb4:	080056ae 	.word	0x080056ae
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d0f 	.word	0x08004d0f
 8004fc0:	080056aa 	.word	0x080056aa

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4616      	mov	r6, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bfb8      	it	lt
 8004fd8:	4613      	movlt	r3, r2
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b10a      	cbz	r2, 8004fea <_printf_common+0x26>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	6833      	ldrmi	r3, [r6, #0]
 8004ff2:	3302      	addmi	r3, #2
 8004ff4:	6033      	strmi	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	f015 0506 	ands.w	r5, r5, #6
 8004ffc:	d106      	bne.n	800500c <_printf_common+0x48>
 8004ffe:	f104 0a19 	add.w	sl, r4, #25
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc26      	bgt.n	800505a <_printf_common+0x96>
 800500c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005010:	1e13      	subs	r3, r2, #0
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	2301      	movne	r3, #1
 8005018:	0692      	lsls	r2, r2, #26
 800501a:	d42b      	bmi.n	8005074 <_printf_common+0xb0>
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d01e      	beq.n	8005068 <_printf_common+0xa4>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68e5      	ldr	r5, [r4, #12]
 800502e:	6832      	ldr	r2, [r6, #0]
 8005030:	f003 0306 	and.w	r3, r3, #6
 8005034:	2b04      	cmp	r3, #4
 8005036:	bf08      	it	eq
 8005038:	1aad      	subeq	r5, r5, r2
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	bf0c      	ite	eq
 8005040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005044:	2500      	movne	r5, #0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfc4      	itt	gt
 800504a:	1a9b      	subgt	r3, r3, r2
 800504c:	18ed      	addgt	r5, r5, r3
 800504e:	2600      	movs	r6, #0
 8005050:	341a      	adds	r4, #26
 8005052:	42b5      	cmp	r5, r6
 8005054:	d11a      	bne.n	800508c <_printf_common+0xc8>
 8005056:	2000      	movs	r0, #0
 8005058:	e008      	b.n	800506c <_printf_common+0xa8>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4649      	mov	r1, r9
 8005060:	4638      	mov	r0, r7
 8005062:	47c0      	blx	r8
 8005064:	3001      	adds	r0, #1
 8005066:	d103      	bne.n	8005070 <_printf_common+0xac>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	3501      	adds	r5, #1
 8005072:	e7c6      	b.n	8005002 <_printf_common+0x3e>
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	2030      	movs	r0, #48	; 0x30
 800507a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507e:	4422      	add	r2, r4
 8005080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005088:	3302      	adds	r3, #2
 800508a:	e7c7      	b.n	800501c <_printf_common+0x58>
 800508c:	2301      	movs	r3, #1
 800508e:	4622      	mov	r2, r4
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d0e6      	beq.n	8005068 <_printf_common+0xa4>
 800509a:	3601      	adds	r6, #1
 800509c:	e7d9      	b.n	8005052 <_printf_common+0x8e>
	...

080050a0 <_printf_i>:
 80050a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	460c      	mov	r4, r1
 80050a6:	4691      	mov	r9, r2
 80050a8:	7e27      	ldrb	r7, [r4, #24]
 80050aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050ac:	2f78      	cmp	r7, #120	; 0x78
 80050ae:	4680      	mov	r8, r0
 80050b0:	469a      	mov	sl, r3
 80050b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b6:	d807      	bhi.n	80050c8 <_printf_i+0x28>
 80050b8:	2f62      	cmp	r7, #98	; 0x62
 80050ba:	d80a      	bhi.n	80050d2 <_printf_i+0x32>
 80050bc:	2f00      	cmp	r7, #0
 80050be:	f000 80d8 	beq.w	8005272 <_printf_i+0x1d2>
 80050c2:	2f58      	cmp	r7, #88	; 0x58
 80050c4:	f000 80a3 	beq.w	800520e <_printf_i+0x16e>
 80050c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d0:	e03a      	b.n	8005148 <_printf_i+0xa8>
 80050d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d6:	2b15      	cmp	r3, #21
 80050d8:	d8f6      	bhi.n	80050c8 <_printf_i+0x28>
 80050da:	a001      	add	r0, pc, #4	; (adr r0, 80050e0 <_printf_i+0x40>)
 80050dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	080050c9 	.word	0x080050c9
 80050ec:	080050c9 	.word	0x080050c9
 80050f0:	080050c9 	.word	0x080050c9
 80050f4:	080050c9 	.word	0x080050c9
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	080050c9 	.word	0x080050c9
 8005100:	080050c9 	.word	0x080050c9
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	08005259 	.word	0x08005259
 8005110:	0800517d 	.word	0x0800517d
 8005114:	0800523b 	.word	0x0800523b
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	0800527b 	.word	0x0800527b
 8005124:	080050c9 	.word	0x080050c9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005243 	.word	0x08005243
 8005138:	680b      	ldr	r3, [r1, #0]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	600a      	str	r2, [r1, #0]
 8005140:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005148:	2301      	movs	r3, #1
 800514a:	e0a3      	b.n	8005294 <_printf_i+0x1f4>
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	6808      	ldr	r0, [r1, #0]
 8005150:	062e      	lsls	r6, r5, #24
 8005152:	f100 0304 	add.w	r3, r0, #4
 8005156:	d50a      	bpl.n	800516e <_printf_i+0xce>
 8005158:	6805      	ldr	r5, [r0, #0]
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	2d00      	cmp	r5, #0
 800515e:	da03      	bge.n	8005168 <_printf_i+0xc8>
 8005160:	232d      	movs	r3, #45	; 0x2d
 8005162:	426d      	negs	r5, r5
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	485e      	ldr	r0, [pc, #376]	; (80052e4 <_printf_i+0x244>)
 800516a:	230a      	movs	r3, #10
 800516c:	e019      	b.n	80051a2 <_printf_i+0x102>
 800516e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005172:	6805      	ldr	r5, [r0, #0]
 8005174:	600b      	str	r3, [r1, #0]
 8005176:	bf18      	it	ne
 8005178:	b22d      	sxthne	r5, r5
 800517a:	e7ef      	b.n	800515c <_printf_i+0xbc>
 800517c:	680b      	ldr	r3, [r1, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	1d18      	adds	r0, r3, #4
 8005182:	6008      	str	r0, [r1, #0]
 8005184:	0628      	lsls	r0, r5, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xec>
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0xf2>
 800518c:	0669      	lsls	r1, r5, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xe8>
 8005190:	881d      	ldrh	r5, [r3, #0]
 8005192:	4854      	ldr	r0, [pc, #336]	; (80052e4 <_printf_i+0x244>)
 8005194:	2f6f      	cmp	r7, #111	; 0x6f
 8005196:	bf0c      	ite	eq
 8005198:	2308      	moveq	r3, #8
 800519a:	230a      	movne	r3, #10
 800519c:	2100      	movs	r1, #0
 800519e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a2:	6866      	ldr	r6, [r4, #4]
 80051a4:	60a6      	str	r6, [r4, #8]
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	bfa2      	ittt	ge
 80051aa:	6821      	ldrge	r1, [r4, #0]
 80051ac:	f021 0104 	bicge.w	r1, r1, #4
 80051b0:	6021      	strge	r1, [r4, #0]
 80051b2:	b90d      	cbnz	r5, 80051b8 <_printf_i+0x118>
 80051b4:	2e00      	cmp	r6, #0
 80051b6:	d04d      	beq.n	8005254 <_printf_i+0x1b4>
 80051b8:	4616      	mov	r6, r2
 80051ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80051be:	fb03 5711 	mls	r7, r3, r1, r5
 80051c2:	5dc7      	ldrb	r7, [r0, r7]
 80051c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051c8:	462f      	mov	r7, r5
 80051ca:	42bb      	cmp	r3, r7
 80051cc:	460d      	mov	r5, r1
 80051ce:	d9f4      	bls.n	80051ba <_printf_i+0x11a>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d10b      	bne.n	80051ec <_printf_i+0x14c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07df      	lsls	r7, r3, #31
 80051d8:	d508      	bpl.n	80051ec <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	bfde      	ittt	le
 80051e2:	2330      	movle	r3, #48	; 0x30
 80051e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051ec:	1b92      	subs	r2, r2, r6
 80051ee:	6122      	str	r2, [r4, #16]
 80051f0:	f8cd a000 	str.w	sl, [sp]
 80051f4:	464b      	mov	r3, r9
 80051f6:	aa03      	add	r2, sp, #12
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fee2 	bl	8004fc4 <_printf_common>
 8005200:	3001      	adds	r0, #1
 8005202:	d14c      	bne.n	800529e <_printf_i+0x1fe>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	4835      	ldr	r0, [pc, #212]	; (80052e4 <_printf_i+0x244>)
 8005210:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	680e      	ldr	r6, [r1, #0]
 8005218:	061f      	lsls	r7, r3, #24
 800521a:	f856 5b04 	ldr.w	r5, [r6], #4
 800521e:	600e      	str	r6, [r1, #0]
 8005220:	d514      	bpl.n	800524c <_printf_i+0x1ac>
 8005222:	07d9      	lsls	r1, r3, #31
 8005224:	bf44      	itt	mi
 8005226:	f043 0320 	orrmi.w	r3, r3, #32
 800522a:	6023      	strmi	r3, [r4, #0]
 800522c:	b91d      	cbnz	r5, 8005236 <_printf_i+0x196>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f023 0320 	bic.w	r3, r3, #32
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2310      	movs	r3, #16
 8005238:	e7b0      	b.n	800519c <_printf_i+0xfc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	2378      	movs	r3, #120	; 0x78
 8005244:	4828      	ldr	r0, [pc, #160]	; (80052e8 <_printf_i+0x248>)
 8005246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524a:	e7e3      	b.n	8005214 <_printf_i+0x174>
 800524c:	065e      	lsls	r6, r3, #25
 800524e:	bf48      	it	mi
 8005250:	b2ad      	uxthmi	r5, r5
 8005252:	e7e6      	b.n	8005222 <_printf_i+0x182>
 8005254:	4616      	mov	r6, r2
 8005256:	e7bb      	b.n	80051d0 <_printf_i+0x130>
 8005258:	680b      	ldr	r3, [r1, #0]
 800525a:	6826      	ldr	r6, [r4, #0]
 800525c:	6960      	ldr	r0, [r4, #20]
 800525e:	1d1d      	adds	r5, r3, #4
 8005260:	600d      	str	r5, [r1, #0]
 8005262:	0635      	lsls	r5, r6, #24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	d501      	bpl.n	800526c <_printf_i+0x1cc>
 8005268:	6018      	str	r0, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0x1d2>
 800526c:	0671      	lsls	r1, r6, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0x1c8>
 8005270:	8018      	strh	r0, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	4616      	mov	r6, r2
 8005278:	e7ba      	b.n	80051f0 <_printf_i+0x150>
 800527a:	680b      	ldr	r3, [r1, #0]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	600a      	str	r2, [r1, #0]
 8005280:	681e      	ldr	r6, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	4630      	mov	r0, r6
 8005288:	f7fa ffaa 	bl	80001e0 <memchr>
 800528c:	b108      	cbz	r0, 8005292 <_printf_i+0x1f2>
 800528e:	1b80      	subs	r0, r0, r6
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e7a8      	b.n	80051f0 <_printf_i+0x150>
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	4632      	mov	r2, r6
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d0ab      	beq.n	8005204 <_printf_i+0x164>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	079b      	lsls	r3, r3, #30
 80052b0:	d413      	bmi.n	80052da <_printf_i+0x23a>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	4298      	cmp	r0, r3
 80052b8:	bfb8      	it	lt
 80052ba:	4618      	movlt	r0, r3
 80052bc:	e7a4      	b.n	8005208 <_printf_i+0x168>
 80052be:	2301      	movs	r3, #1
 80052c0:	4632      	mov	r2, r6
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d09b      	beq.n	8005204 <_printf_i+0x164>
 80052cc:	3501      	adds	r5, #1
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	9903      	ldr	r1, [sp, #12]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dcf2      	bgt.n	80052be <_printf_i+0x21e>
 80052d8:	e7eb      	b.n	80052b2 <_printf_i+0x212>
 80052da:	2500      	movs	r5, #0
 80052dc:	f104 0619 	add.w	r6, r4, #25
 80052e0:	e7f5      	b.n	80052ce <_printf_i+0x22e>
 80052e2:	bf00      	nop
 80052e4:	080056b5 	.word	0x080056b5
 80052e8:	080056c6 	.word	0x080056c6

080052ec <memcpy>:
 80052ec:	440a      	add	r2, r1
 80052ee:	4291      	cmp	r1, r2
 80052f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f4:	d100      	bne.n	80052f8 <memcpy+0xc>
 80052f6:	4770      	bx	lr
 80052f8:	b510      	push	{r4, lr}
 80052fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005302:	4291      	cmp	r1, r2
 8005304:	d1f9      	bne.n	80052fa <memcpy+0xe>
 8005306:	bd10      	pop	{r4, pc}

08005308 <memmove>:
 8005308:	4288      	cmp	r0, r1
 800530a:	b510      	push	{r4, lr}
 800530c:	eb01 0402 	add.w	r4, r1, r2
 8005310:	d902      	bls.n	8005318 <memmove+0x10>
 8005312:	4284      	cmp	r4, r0
 8005314:	4623      	mov	r3, r4
 8005316:	d807      	bhi.n	8005328 <memmove+0x20>
 8005318:	1e43      	subs	r3, r0, #1
 800531a:	42a1      	cmp	r1, r4
 800531c:	d008      	beq.n	8005330 <memmove+0x28>
 800531e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005326:	e7f8      	b.n	800531a <memmove+0x12>
 8005328:	4402      	add	r2, r0
 800532a:	4601      	mov	r1, r0
 800532c:	428a      	cmp	r2, r1
 800532e:	d100      	bne.n	8005332 <memmove+0x2a>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800533a:	e7f7      	b.n	800532c <memmove+0x24>

0800533c <_free_r>:
 800533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800533e:	2900      	cmp	r1, #0
 8005340:	d048      	beq.n	80053d4 <_free_r+0x98>
 8005342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005346:	9001      	str	r0, [sp, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f1a1 0404 	sub.w	r4, r1, #4
 800534e:	bfb8      	it	lt
 8005350:	18e4      	addlt	r4, r4, r3
 8005352:	f000 f8d3 	bl	80054fc <__malloc_lock>
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <_free_r+0x9c>)
 8005358:	9801      	ldr	r0, [sp, #4]
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	4615      	mov	r5, r2
 800535e:	b933      	cbnz	r3, 800536e <_free_r+0x32>
 8005360:	6063      	str	r3, [r4, #4]
 8005362:	6014      	str	r4, [r2, #0]
 8005364:	b003      	add	sp, #12
 8005366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800536a:	f000 b8cd 	b.w	8005508 <__malloc_unlock>
 800536e:	42a3      	cmp	r3, r4
 8005370:	d90b      	bls.n	800538a <_free_r+0x4e>
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	1862      	adds	r2, r4, r1
 8005376:	4293      	cmp	r3, r2
 8005378:	bf04      	itt	eq
 800537a:	681a      	ldreq	r2, [r3, #0]
 800537c:	685b      	ldreq	r3, [r3, #4]
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	bf04      	itt	eq
 8005382:	1852      	addeq	r2, r2, r1
 8005384:	6022      	streq	r2, [r4, #0]
 8005386:	602c      	str	r4, [r5, #0]
 8005388:	e7ec      	b.n	8005364 <_free_r+0x28>
 800538a:	461a      	mov	r2, r3
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b10b      	cbz	r3, 8005394 <_free_r+0x58>
 8005390:	42a3      	cmp	r3, r4
 8005392:	d9fa      	bls.n	800538a <_free_r+0x4e>
 8005394:	6811      	ldr	r1, [r2, #0]
 8005396:	1855      	adds	r5, r2, r1
 8005398:	42a5      	cmp	r5, r4
 800539a:	d10b      	bne.n	80053b4 <_free_r+0x78>
 800539c:	6824      	ldr	r4, [r4, #0]
 800539e:	4421      	add	r1, r4
 80053a0:	1854      	adds	r4, r2, r1
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	d1dd      	bne.n	8005364 <_free_r+0x28>
 80053a8:	681c      	ldr	r4, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	6053      	str	r3, [r2, #4]
 80053ae:	4421      	add	r1, r4
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	e7d7      	b.n	8005364 <_free_r+0x28>
 80053b4:	d902      	bls.n	80053bc <_free_r+0x80>
 80053b6:	230c      	movs	r3, #12
 80053b8:	6003      	str	r3, [r0, #0]
 80053ba:	e7d3      	b.n	8005364 <_free_r+0x28>
 80053bc:	6825      	ldr	r5, [r4, #0]
 80053be:	1961      	adds	r1, r4, r5
 80053c0:	428b      	cmp	r3, r1
 80053c2:	bf04      	itt	eq
 80053c4:	6819      	ldreq	r1, [r3, #0]
 80053c6:	685b      	ldreq	r3, [r3, #4]
 80053c8:	6063      	str	r3, [r4, #4]
 80053ca:	bf04      	itt	eq
 80053cc:	1949      	addeq	r1, r1, r5
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	6054      	str	r4, [r2, #4]
 80053d2:	e7c7      	b.n	8005364 <_free_r+0x28>
 80053d4:	b003      	add	sp, #12
 80053d6:	bd30      	pop	{r4, r5, pc}
 80053d8:	2000012c 	.word	0x2000012c

080053dc <_malloc_r>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	1ccd      	adds	r5, r1, #3
 80053e0:	f025 0503 	bic.w	r5, r5, #3
 80053e4:	3508      	adds	r5, #8
 80053e6:	2d0c      	cmp	r5, #12
 80053e8:	bf38      	it	cc
 80053ea:	250c      	movcc	r5, #12
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	4606      	mov	r6, r0
 80053f0:	db01      	blt.n	80053f6 <_malloc_r+0x1a>
 80053f2:	42a9      	cmp	r1, r5
 80053f4:	d903      	bls.n	80053fe <_malloc_r+0x22>
 80053f6:	230c      	movs	r3, #12
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	2000      	movs	r0, #0
 80053fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fe:	f000 f87d 	bl	80054fc <__malloc_lock>
 8005402:	4921      	ldr	r1, [pc, #132]	; (8005488 <_malloc_r+0xac>)
 8005404:	680a      	ldr	r2, [r1, #0]
 8005406:	4614      	mov	r4, r2
 8005408:	b99c      	cbnz	r4, 8005432 <_malloc_r+0x56>
 800540a:	4f20      	ldr	r7, [pc, #128]	; (800548c <_malloc_r+0xb0>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	b923      	cbnz	r3, 800541a <_malloc_r+0x3e>
 8005410:	4621      	mov	r1, r4
 8005412:	4630      	mov	r0, r6
 8005414:	f000 f862 	bl	80054dc <_sbrk_r>
 8005418:	6038      	str	r0, [r7, #0]
 800541a:	4629      	mov	r1, r5
 800541c:	4630      	mov	r0, r6
 800541e:	f000 f85d 	bl	80054dc <_sbrk_r>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d123      	bne.n	800546e <_malloc_r+0x92>
 8005426:	230c      	movs	r3, #12
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	4630      	mov	r0, r6
 800542c:	f000 f86c 	bl	8005508 <__malloc_unlock>
 8005430:	e7e3      	b.n	80053fa <_malloc_r+0x1e>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	1b5b      	subs	r3, r3, r5
 8005436:	d417      	bmi.n	8005468 <_malloc_r+0x8c>
 8005438:	2b0b      	cmp	r3, #11
 800543a:	d903      	bls.n	8005444 <_malloc_r+0x68>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	441c      	add	r4, r3
 8005440:	6025      	str	r5, [r4, #0]
 8005442:	e004      	b.n	800544e <_malloc_r+0x72>
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	42a2      	cmp	r2, r4
 8005448:	bf0c      	ite	eq
 800544a:	600b      	streq	r3, [r1, #0]
 800544c:	6053      	strne	r3, [r2, #4]
 800544e:	4630      	mov	r0, r6
 8005450:	f000 f85a 	bl	8005508 <__malloc_unlock>
 8005454:	f104 000b 	add.w	r0, r4, #11
 8005458:	1d23      	adds	r3, r4, #4
 800545a:	f020 0007 	bic.w	r0, r0, #7
 800545e:	1ac2      	subs	r2, r0, r3
 8005460:	d0cc      	beq.n	80053fc <_malloc_r+0x20>
 8005462:	1a1b      	subs	r3, r3, r0
 8005464:	50a3      	str	r3, [r4, r2]
 8005466:	e7c9      	b.n	80053fc <_malloc_r+0x20>
 8005468:	4622      	mov	r2, r4
 800546a:	6864      	ldr	r4, [r4, #4]
 800546c:	e7cc      	b.n	8005408 <_malloc_r+0x2c>
 800546e:	1cc4      	adds	r4, r0, #3
 8005470:	f024 0403 	bic.w	r4, r4, #3
 8005474:	42a0      	cmp	r0, r4
 8005476:	d0e3      	beq.n	8005440 <_malloc_r+0x64>
 8005478:	1a21      	subs	r1, r4, r0
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f82e 	bl	80054dc <_sbrk_r>
 8005480:	3001      	adds	r0, #1
 8005482:	d1dd      	bne.n	8005440 <_malloc_r+0x64>
 8005484:	e7cf      	b.n	8005426 <_malloc_r+0x4a>
 8005486:	bf00      	nop
 8005488:	2000012c 	.word	0x2000012c
 800548c:	20000130 	.word	0x20000130

08005490 <_realloc_r>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	4607      	mov	r7, r0
 8005494:	4614      	mov	r4, r2
 8005496:	460e      	mov	r6, r1
 8005498:	b921      	cbnz	r1, 80054a4 <_realloc_r+0x14>
 800549a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800549e:	4611      	mov	r1, r2
 80054a0:	f7ff bf9c 	b.w	80053dc <_malloc_r>
 80054a4:	b922      	cbnz	r2, 80054b0 <_realloc_r+0x20>
 80054a6:	f7ff ff49 	bl	800533c <_free_r>
 80054aa:	4625      	mov	r5, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b0:	f000 f830 	bl	8005514 <_malloc_usable_size_r>
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d20f      	bcs.n	80054d8 <_realloc_r+0x48>
 80054b8:	4621      	mov	r1, r4
 80054ba:	4638      	mov	r0, r7
 80054bc:	f7ff ff8e 	bl	80053dc <_malloc_r>
 80054c0:	4605      	mov	r5, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d0f2      	beq.n	80054ac <_realloc_r+0x1c>
 80054c6:	4631      	mov	r1, r6
 80054c8:	4622      	mov	r2, r4
 80054ca:	f7ff ff0f 	bl	80052ec <memcpy>
 80054ce:	4631      	mov	r1, r6
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7ff ff33 	bl	800533c <_free_r>
 80054d6:	e7e9      	b.n	80054ac <_realloc_r+0x1c>
 80054d8:	4635      	mov	r5, r6
 80054da:	e7e7      	b.n	80054ac <_realloc_r+0x1c>

080054dc <_sbrk_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d06      	ldr	r5, [pc, #24]	; (80054f8 <_sbrk_r+0x1c>)
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	f7fc fd5a 	bl	8001fa0 <_sbrk>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_sbrk_r+0x1a>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_sbrk_r+0x1a>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	20000318 	.word	0x20000318

080054fc <__malloc_lock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__malloc_lock+0x8>)
 80054fe:	f000 b811 	b.w	8005524 <__retarget_lock_acquire_recursive>
 8005502:	bf00      	nop
 8005504:	20000320 	.word	0x20000320

08005508 <__malloc_unlock>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__malloc_unlock+0x8>)
 800550a:	f000 b80c 	b.w	8005526 <__retarget_lock_release_recursive>
 800550e:	bf00      	nop
 8005510:	20000320 	.word	0x20000320

08005514 <_malloc_usable_size_r>:
 8005514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005518:	1f18      	subs	r0, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfbc      	itt	lt
 800551e:	580b      	ldrlt	r3, [r1, r0]
 8005520:	18c0      	addlt	r0, r0, r3
 8005522:	4770      	bx	lr

08005524 <__retarget_lock_acquire_recursive>:
 8005524:	4770      	bx	lr

08005526 <__retarget_lock_release_recursive>:
 8005526:	4770      	bx	lr

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
